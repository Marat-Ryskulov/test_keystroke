# ml/model_manager.py - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã

import numpy as np
from typing import Optional, Tuple, List, Dict
import os

from ml.simple_knn_trainer import SimpleKNNTrainer
from ml.feature_extractor import FeatureExtractor
from utils.database import DatabaseManager
from config import MIN_TRAINING_SAMPLES, MODELS_DIR

class ModelManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.feature_extractor = FeatureExtractor()
        self.models_cache = {}
    
    def train_user_model(self, user_id: int, use_enhanced_training: bool = None) -> Tuple[bool, float, str]:
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä use_enhanced_training –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è)
        """
        print(f"–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_samples = self.db.get_user_keystroke_samples(user_id, training_only=True)
        
        if len(user_samples) < MIN_TRAINING_SAMPLES:
            return False, 0.0, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º {MIN_TRAINING_SAMPLES}, —Å–æ–±—Ä–∞–Ω–æ {len(user_samples)}"
        
        # –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        trainer = SimpleKNNTrainer(user_id)
        success, accuracy, message = trainer.train_user_model(user_samples)
        
        if success:
            # –ö—ç—à–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
            self.models_cache[user_id] = trainer
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.db.get_user_by_id(user_id)
            if user:
                user.is_trained = True
                user.training_samples = len(user_samples)
                self.db.update_user(user)
            
            print(f"–ü—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2%}")
        
        return success, accuracy, message
    
    def authenticate_user(self, user_id: int, keystroke_features: dict, verbose: bool = False) -> Tuple[bool, float, str]:
        """
        –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å –æ—Ç–ª–∞–¥–∫–æ–π
        """
        print(f"\nüö® –ù–ê–ß–ê–õ–û –û–¢–õ–ê–î–ö–ò AUTHENTICATE_USER")
        print(f"User ID: {user_id}")
        print(f"Keystroke features: {keystroke_features}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = self._get_user_model(user_id)
        if model is None:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False, 0.0, "–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {type(model)}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        feature_vector = np.array([
            keystroke_features.get('avg_dwell_time', 0),
            keystroke_features.get('std_dwell_time', 0),
            keystroke_features.get('avg_flight_time', 0),
            keystroke_features.get('std_flight_time', 0),
            keystroke_features.get('typing_speed', 0),
            keystroke_features.get('total_typing_time', 0)
        ])
        
        print(f"üìä Feature vector: {feature_vector}")
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        print("üîÑ –í—ã–∑—ã–≤–∞–µ–º model.predict...")
        is_authenticated, confidence = model.predict(feature_vector)
        
        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç predict: authenticated={is_authenticated}, confidence={confidence}")
        
        if verbose:
            print(f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–†–ò–ù–Ø–¢' if is_authenticated else '–û–¢–ö–õ–û–ù–ï–ù'}")
        
        if is_authenticated:
            message = f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})"
        else:
            message = f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%})"
        
        print(f"üìù –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        return is_authenticated, confidence, message
    
    def authenticate_user_detailed(self, user_id: int, keystroke_features: dict) -> Tuple[bool, float, dict]:
        """
        –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        is_authenticated, confidence, message = self.authenticate_user(user_id, keystroke_features, verbose=True)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        detailed_stats = {
            'final_confidence': confidence,
            'threshold': 0.75,
            'training_samples': len(self.db.get_user_keystroke_samples(user_id, training_only=True))
        }
        
        return is_authenticated, confidence, detailed_stats
    
    def _get_user_model(self, user_id: int) -> Optional[SimpleKNNTrainer]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
        print(f"\nüîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        if user_id in self.models_cache:
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫—ç—à–µ: {type(self.models_cache[user_id])}")
            return self.models_cache[user_id]
        
        print("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å —Å –¥–∏—Å–∫–∞...")
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model = SimpleKNNTrainer.load_model(user_id)
        if model:
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –¥–∏—Å–∫–∞: {type(model)}")
            self.models_cache[user_id] = model
            return model
        
        print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return None
    
    def delete_user_model(self, user_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
        if user_id in self.models_cache:
            del self.models_cache[user_id]
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        model_path = os.path.join(MODELS_DIR, f"user_{user_id}_simple_knn.pkl")
        if os.path.exists(model_path):
            os.remove(model_path)
            print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {model_path}")
    
    def get_model_info(self, user_id: int) -> dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
        model = self._get_user_model(user_id)
        user_samples = self.db.get_user_keystroke_samples(user_id, training_only=True)
        
        info = {
            'min_samples': MIN_TRAINING_SAMPLES,
            'training_samples': len(user_samples),
            'model_type': 'none'
        }
        
        if model:
            model_info = model.get_model_info()
            info.update({
                'is_trained': True,
                'model_type': 'simple_knn',
                'best_params': model_info.get('best_params', {}),
                'training_stats': model_info.get('training_stats', {}),
                'feature_importance': []
            })
        else:
            info.update({
                'is_trained': False,
                'feature_importance': []
            })
        
        return info
    
    def get_training_report(self, user_id: int) -> Optional[Dict]:
        """–û—Ç—á–µ—Ç –æ–± –æ–±—É—á–µ–Ω–∏–∏"""
        model = self._get_user_model(user_id)
        if model:
            return model.training_stats
        return None