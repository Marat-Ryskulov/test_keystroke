# gui/diploma_stats_window.py - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
from typing import Dict, List, Tuple
from datetime import datetime
import json

from models.user import User
from auth.keystroke_auth import KeystrokeAuthenticator
from ml.model_manager import ModelManager
from utils.database import DatabaseManager
from config import FONT_FAMILY

plt.style.use('default')

class DiplomaStatsWindow:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self, parent, user: User, keystroke_auth: KeystrokeAuthenticator):
        self.parent = parent
        self.user = user
        self.keystroke_auth = keystroke_auth
        self.model_manager = ModelManager()
        self.db = DatabaseManager()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = tk.Toplevel(parent)
        self.window.title(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã - {user.username}")
        self.window.geometry("1200x800")
        self.window.resizable(True, True)
        
        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.window.transient(parent)
        self.window.grab_set()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        self.training_samples = self.db.get_user_training_samples(user.id)
        self.auth_attempts = self.db.get_auth_attempts(user.id, limit=100)
        self.model_info = self.model_manager.get_model_info(user.id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_interface()
        self.load_statistics()
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.window, padding=10)
        header_frame.pack(fill=tk.X)
        
        title_label = ttk.Label(
            header_frame,
            text=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã - {self.user.username}",
            font=(FONT_FAMILY, 16, 'bold')
        )
        title_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_frame = ttk.LabelFrame(header_frame, text="üìã –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padding=10)
        info_frame.pack(fill=tk.X, pady=10)
        
        self.info_text = tk.Text(info_frame, height=4, width=100, font=(FONT_FAMILY, 10))
        self.info_text.pack()
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(self.window)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.create_features_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (FAR, FRR, EER)
        self.create_security_metrics_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: ROC-–∞–Ω–∞–ª–∏–∑
        self.create_roc_tab()
        
        # –ö–Ω–æ–ø–∫–∏
        self.create_buttons()
    
    def create_features_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        frame = ttk.Frame(self.notebook, padding=15)
        self.notebook.add(frame, text="üìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (2x2)
        self.fig_features, ((self.ax_f1, self.ax_f2), (self.ax_f3, self.ax_f4)) = plt.subplots(2, 2, figsize=(12, 8))
        self.canvas_features = FigureCanvasTkAgg(self.fig_features, frame)
        self.canvas_features.get_tk_widget().pack(fill=tk.BOTH, expand=True)
    
    def create_security_metrics_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        frame = ttk.Frame(self.notebook, padding=15)
        self.notebook.add(frame, text="üîí –ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_frame = ttk.LabelFrame(frame, text="üìä FAR, FRR, EER", padding=10)
        metrics_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.metrics_text = tk.Text(metrics_frame, height=10, width=100, font=(FONT_FAMILY, 10))
        metrics_scroll = ttk.Scrollbar(metrics_frame, orient=tk.VERTICAL, command=self.metrics_text.yview)
        self.metrics_text.configure(yscrollcommand=metrics_scroll.set)
        
        self.metrics_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        metrics_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫
        chart_frame = ttk.LabelFrame(frame, text="üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫", padding=10)
        chart_frame.pack(fill=tk.BOTH, expand=True)
        
        self.fig_security, (self.ax_sec1, self.ax_sec2) = plt.subplots(1, 2, figsize=(12, 5))
        self.canvas_security = FigureCanvasTkAgg(self.fig_security, chart_frame)
        self.canvas_security.get_tk_widget().pack(fill=tk.BOTH, expand=True)
    
    def create_roc_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ ROC-–∞–Ω–∞–ª–∏–∑–∞"""
        frame = ttk.Frame(self.notebook, padding=15)
        self.notebook.add(frame, text="üìà ROC-–∞–Ω–∞–ª–∏–∑")
        
        # –û–ø–∏—Å–∞–Ω–∏–µ ROC
        desc_frame = ttk.LabelFrame(frame, text="üìñ ROC-–∞–Ω–∞–ª–∏–∑", padding=10)
        desc_frame.pack(fill=tk.X, pady=(0, 10))
        
        desc_text = """ROC (Receiver Operating Characteristic) –∫—Ä–∏–≤–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –±–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        
TPR (True Positive Rate) = –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å = 1 - FRR
FPR (False Positive Rate) = 1 - –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ—Å—Ç—å = FAR  
AUC (Area Under Curve) = –ü–ª–æ—â–∞–¥—å –ø–æ–¥ ROC –∫—Ä–∏–≤–æ–π (0.5 = —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å, 1.0 = –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä)"""
        
        desc_label = ttk.Label(desc_frame, text=desc_text, justify=tk.LEFT, font=(FONT_FAMILY, 10))
        desc_label.pack(anchor=tk.W)
        
        # ROC –≥—Ä–∞—Ñ–∏–∫–∏
        self.fig_roc, (self.ax_roc1, self.ax_roc2) = plt.subplots(1, 2, figsize=(14, 6))
        self.canvas_roc = FigureCanvasTkAgg(self.fig_roc, frame)
        self.canvas_roc.get_tk_widget().pack(fill=tk.BOTH, expand=True)
    
    def create_buttons(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫"""
        buttons_frame = ttk.Frame(self.window)
        buttons_frame.pack(fill=tk.X, padx=10, pady=5)
        
        ttk.Button(
            buttons_frame,
            text="üíæ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
            command=self.export_report
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            buttons_frame,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            command=self.refresh_data
        ).pack(side=tk.LEFT, padx=5)
        
        ttk.Button(
            buttons_frame,
            text="‚ùå –ó–∞–∫—Ä—ã—Ç—å",
            command=self.window.destroy
        ).pack(side=tk.RIGHT, padx=5)
    
    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            self.load_general_info()
            self.load_features_analysis()
            self.load_security_metrics()
            self.load_roc_analysis()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            import traceback
            traceback.print_exc()
    
    def load_general_info(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        info = f"""üìã –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï:

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user.username}
üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {self.user.created_at.strftime('%d.%m.%Y %H:%M') if self.user.created_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üéì –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏: {'‚úÖ –û–±—É—á–µ–Ω–∞' if self.user.is_trained else '‚ùå –ù–µ –æ–±—É—á–µ–Ω–∞'}
üìö –û–±—É—á–∞—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤: {len(self.training_samples)}
üîê –ü–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(self.auth_attempts)}"""
        
        self.info_text.insert(tk.END, info)
    
    def load_features_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –ø–æ—á–µ—Ä–∫–∞"""
        if not self.training_samples:
            for ax in [self.ax_f1, self.ax_f2, self.ax_f3, self.ax_f4]:
                ax.text(0.5, 0.5, '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', ha='center', va='center', 
                       transform=ax.transAxes, fontsize=12)
            self.canvas_features.draw()
            return
        
        try:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            features_data = []
            for sample in self.training_samples:
                if sample.features:
                    features_data.append([
                        sample.features.get('avg_dwell_time', 0) * 1000,  # –≤ –º—Å
                        sample.features.get('avg_flight_time', 0) * 1000,  # –≤ –º—Å
                        sample.features.get('typing_speed', 0),
                        sample.features.get('total_typing_time', 0)
                    ])
            
            if not features_data:
                return
            
            features_array = np.array(features_data)
            feature_names = [
                '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à (–º—Å)', 
                '–í—Ä–µ–º—è –º–µ–∂–¥—É –∫–ª–∞–≤–∏—à–∞–º–∏ (–º—Å)', 
                '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–∫–ª–∞–≤–∏—à/—Å–µ–∫)', 
                '–û–±—â–µ–µ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ (—Å–µ–∫)'
            ]
            
            # –ß–µ—Ç—ã—Ä–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
            axes = [self.ax_f1, self.ax_f2, self.ax_f3, self.ax_f4]
            colors = ['skyblue', 'lightcoral', 'lightgreen', 'lightsalmon']
            
            for i, (ax, name, color) in enumerate(zip(axes, feature_names, colors)):
                data = features_array[:, i]
                
                # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞
                ax.hist(data, bins=min(15, len(data)//2 + 1), alpha=0.7, 
                       color=color, edgecolor='black')
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                mean_val = np.mean(data)
                std_val = np.std(data)
                
                ax.axvline(mean_val, color='red', linestyle='--', linewidth=2, 
                          label=f'–°—Ä–µ–¥–Ω–µ–µ: {mean_val:.2f}')
                ax.axvline(mean_val - std_val, color='orange', linestyle=':', 
                          alpha=0.7, label=f'¬±œÉ: {std_val:.2f}')
                ax.axvline(mean_val + std_val, color='orange', linestyle=':', alpha=0.7)
                
                ax.set_xlabel(name, fontsize=10)
                ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞', fontsize=10)
                ax.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {name}', fontsize=11, fontweight='bold')
                ax.legend(fontsize=8)
                ax.grid(True, alpha=0.3)
            
            self.fig_features.tight_layout()
            self.canvas_features.draw()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
    
    def load_security_metrics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if len(self.auth_attempts) < 5:
            metrics_info = f"""–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –î–ê–ù–ù–´–• –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ú–ï–¢–†–ò–ö –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò

–ù–∞–π–¥–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(self.auth_attempts)}
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 5 –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ FAR, FRR, EER.

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:
1. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤ (–≤–∞—à –æ–±—ã—á–Ω—ã–π —Å—Ç–∏–ª—å)
2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å —Ä–∞–∑–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∏
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

üìö –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫:
‚Ä¢ FAR (False Acceptance Rate) - –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤
‚Ä¢ FRR (False Rejection Rate) - –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
‚Ä¢ EER (Equal Error Rate) - —Ç–æ—á–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ FAR –∏ FRR (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)"""
            
            self.metrics_text.insert(tk.END, metrics_info)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏
            self._show_theoretical_metrics()
            return
        
        try:
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ø—ã—Ç–æ–∫ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            high_confidence = [a for a in self.auth_attempts if a['final_confidence'] >= 0.7]
            medium_confidence = [a for a in self.auth_attempts if 0.4 <= a['final_confidence'] < 0.7]
            low_confidence = [a for a in self.auth_attempts if a['final_confidence'] < 0.4]
            
            # –°—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
            thresholds = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]
            results = []
            
            legitimate_attempts = high_confidence  # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = –≤—ã
            impostor_attempts = medium_confidence + low_confidence  # –û—Å—Ç–∞–ª—å–Ω–æ–µ = –∏–º–∏—Ç–∞—Ü–∏—è
            
            for threshold in thresholds:
                # –õ–µ–≥–∏—Ç–∏–º–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
                legit_passed = sum(1 for a in legitimate_attempts if a['final_confidence'] >= threshold)
                legit_total = len(legitimate_attempts) if legitimate_attempts else 1
                
                # –ò–º–∏—Ç–∞—Ç–æ—Ä—ã  
                impostor_passed = sum(1 for a in impostor_attempts if a['final_confidence'] >= threshold)
                impostor_total = len(impostor_attempts) if impostor_attempts else 1
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                frr = ((legit_total - legit_passed) / legit_total) * 100
                far = (impostor_passed / impostor_total) * 100
                eer = (far + frr) / 2
                
                results.append({
                    'threshold': threshold,
                    'far': far,
                    'frr': frr,
                    'eer': eer
                })
            
            # –¢–µ–∫—É—â–∏–π –∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            current_result = min(results, key=lambda x: abs(x['threshold'] - 0.75))
            optimal_result = min(results, key=lambda x: x['eer'])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            all_confidences = [a['final_confidence'] for a in self.auth_attempts]
            legit_confidences = [a['final_confidence'] for a in legitimate_attempts] if legitimate_attempts else [0]
            impostor_confidences = [a['final_confidence'] for a in impostor_attempts] if impostor_attempts else [0]
            
            metrics_info = f"""üìä –ú–ï–¢–†–ò–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ë–ò–û–ú–ï–¢–†–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´

üîç –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ü–û–ü–´–¢–û–ö –ü–û –£–í–ï–†–ï–ù–ù–û–°–¢–ò:
‚Ä¢ –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (‚â•70%): {len(high_confidence)} –ø–æ–ø—ã—Ç–æ–∫ ‚Üí —Å—á–∏—Ç–∞—é—Ç—Å—è "–≤–∞—à–∏–º–∏"
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (40-70%): {len(medium_confidence)} –ø–æ–ø—ã—Ç–æ–∫ ‚Üí —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
‚Ä¢ –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (<40%): {len(low_confidence)} –ø–æ–ø—ã—Ç–æ–∫ ‚Üí —Å—á–∏—Ç–∞—é—Ç—Å—è "—á—É–∂–∏–º–∏"

üéØ –ú–ï–¢–†–ò–ö–ò –ü–†–ò –¢–ï–ö–£–©–ï–ú –ü–û–†–û–ì–ï (75%):

üìà FAR (False Acceptance Rate): {current_result['far']:.2f}%
   –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {self._interpret_far(current_result['far'])}

üìâ FRR (False Rejection Rate): {current_result['frr']:.2f}%
   –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {self._interpret_frr(current_result['frr'])}

‚öñÔ∏è EER (Equal Error Rate): {current_result['eer']:.2f}%
   –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {self._interpret_eer(current_result['eer'])}

üéõÔ∏è –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥: {optimal_result['threshold']:.0%}
‚Ä¢ EER –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä–æ–≥–µ: {optimal_result['eer']:.2f}%
‚Ä¢ –£–ª—É—á—à–µ–Ω–∏–µ EER: {current_result['eer'] - optimal_result['eer']:.2f}%

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –£–í–ï–†–ï–ù–ù–û–°–¢–ò:
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏): {np.mean(all_confidences):.1%}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ("–≤–∞—à–∏" –ø–æ–ø—ã—Ç–∫–∏): {np.mean(legit_confidences):.1%}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ("—á—É–∂–∏–µ" –ø–æ–ø—ã—Ç–∫–∏): {np.mean(impostor_confidences):.1%}
‚Ä¢ –†–∞–∑–¥–µ–ª–∏–º–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤: {abs(np.mean(legit_confidences) - np.mean(impostor_confidences)):.1%}

üí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–õ–Ø –î–ò–ü–õ–û–ú–ù–û–ô –†–ê–ë–û–¢–´:
{self._generate_security_conclusion(current_result, optimal_result)}"""
            
            self.metrics_text.insert(tk.END, metrics_info)
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫
            self._plot_security_metrics(results, current_result)
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫: {str(e)}"
            self.metrics_text.insert(tk.END, error_msg)
            print(f"–û—à–∏–±–∫–∞: {e}")
    
    def load_roc_analysis(self):
        """ROC-–∞–Ω–∞–ª–∏–∑"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            model = self.model_manager._get_user_model(self.user.id)
            if not model or not hasattr(model, 'is_trained') or not model.is_trained:
                self.ax_roc1.text(0.5, 0.5, '–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞\n–¢—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ', 
                                ha='center', va='center', transform=self.ax_roc1.transAxes, 
                                fontsize=14, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightyellow"))
                self.ax_roc2.text(0.5, 0.5, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö\n–¥–ª—è ROC –∞–Ω–∞–ª–∏–∑–∞', 
                                ha='center', va='center', transform=self.ax_roc2.transAxes, 
                                fontsize=14, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightyellow"))
                self.canvas_roc.draw()
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ROC
            training_samples = self.training_samples
            if len(training_samples) < 10:
                self.ax_roc1.text(0.5, 0.5, f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {len(training_samples)}\n–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 10', 
                                ha='center', va='center', transform=self.ax_roc1.transAxes, fontsize=14)
                self.canvas_roc.draw()
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
            from ml.feature_extractor import FeatureExtractor
            extractor = FeatureExtractor()
            X_positive = extractor.extract_features_from_samples(training_samples)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            X_negative = self._generate_roc_negatives(X_positive)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            X_test = np.vstack([X_positive, X_negative])
            y_true = np.hstack([
                np.ones(len(X_positive)),   # 1 = –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
                np.zeros(len(X_negative))   # 0 = —á—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            ])
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
            confidence_scores = []
            for sample in X_test:
                try:
                    if hasattr(model, 'authenticate'):
                        is_auth, confidence, _ = model.authenticate(sample, threshold=0.5)
                    else:
                        confidence = 0.5
                    confidence_scores.append(confidence)
                except:
                    confidence_scores.append(0.5)
            
            confidence_scores = np.array(confidence_scores)
            
            # ROC –∫—Ä–∏–≤–∞—è
            from sklearn.metrics import roc_curve, auc
            fpr, tpr, thresholds = roc_curve(y_true, confidence_scores)
            roc_auc = auc(fpr, tpr)
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: ROC –∫—Ä–∏–≤–∞—è
            self.ax_roc1.clear()
            self.ax_roc1.plot(fpr, tpr, color='darkorange', lw=3, 
                            label=f'ROC –∫—Ä–∏–≤–∞—è (AUC = {roc_auc:.3f})')
            self.ax_roc1.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', 
                            label='–°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä (AUC = 0.5)')
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            optimal_idx = np.argmax(tpr - fpr)
            optimal_threshold = thresholds[optimal_idx]
            self.ax_roc1.plot(fpr[optimal_idx], tpr[optimal_idx], 'ro', markersize=10, 
                            label=f'–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–ø–æ—Ä–æ–≥ = {optimal_threshold:.2f})')
            
            self.ax_roc1.set_xlim([0.0, 1.0])
            self.ax_roc1.set_ylim([0.0, 1.05])
            self.ax_roc1.set_xlabel('False Positive Rate (FAR)', fontsize=12)
            self.ax_roc1.set_ylabel('True Positive Rate (1 - FRR)', fontsize=12)
            self.ax_roc1.set_title(f'ROC –ö—Ä–∏–≤–∞—è –¥–ª—è {self.user.username}', fontsize=14, fontweight='bold')
            self.ax_roc1.legend(loc="lower right", fontsize=10)
            self.ax_roc1.grid(True, alpha=0.3)
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è AUC
            if roc_auc >= 0.9:
                auc_text = "–û—Ç–ª–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å!"
                auc_color = "green"
            elif roc_auc >= 0.8:
                auc_text = "–•–æ—Ä–æ—à–∞—è –º–æ–¥–µ–ª—å"
                auc_color = "blue"
            elif roc_auc >= 0.7:
                auc_text = "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è"
                auc_color = "orange"
            else:
                auc_text = "–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
                auc_color = "red"
            
            self.ax_roc1.text(0.6, 0.2, f'{auc_text}\nAUC = {roc_auc:.3f}', 
                            transform=self.ax_roc1.transAxes, fontsize=12, 
                            bbox=dict(boxstyle="round,pad=0.3", facecolor=auc_color, alpha=0.3))
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
            self.ax_roc2.clear()
            
            positive_scores = confidence_scores[y_true == 1]  # –í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏
            negative_scores = confidence_scores[y_true == 0]  # –ß—É–∂–∏–µ –æ—Ü–µ–Ω–∫–∏
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
            self.ax_roc2.hist(negative_scores, bins=20, alpha=0.6, color='red', 
                            label=f'–ß—É–∂–∏–µ –¥–∞–Ω–Ω—ã–µ (n={len(negative_scores)})', 
                            density=True, edgecolor='darkred')
            self.ax_roc2.hist(positive_scores, bins=20, alpha=0.6, color='green', 
                            label=f'–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ (n={len(positive_scores)})', 
                            density=True, edgecolor='darkgreen')
            
            # –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            pos_mean = np.mean(positive_scores)
            neg_mean = np.mean(negative_scores)
            
            self.ax_roc2.axvline(pos_mean, color='darkgreen', linestyle='-', linewidth=2, 
                            alpha=0.8, label=f'–°—Ä–µ–¥–Ω–µ–µ –≤–∞—à–∏—Ö: {pos_mean:.3f}')
            self.ax_roc2.axvline(neg_mean, color='darkred', linestyle='-', linewidth=2, 
                            alpha=0.8, label=f'–°—Ä–µ–¥–Ω–µ–µ —á—É–∂–∏—Ö: {neg_mean:.3f}')
            
            # –ü–æ—Ä–æ–≥
            self.ax_roc2.axvline(0.75, color='black', linestyle='--', linewidth=2, 
                            alpha=0.8, label='–ü–æ—Ä–æ–≥: 75%')
            
            self.ax_roc2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã', fontsize=12)
            self.ax_roc2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', fontsize=12)
            self.ax_roc2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', fontsize=14, fontweight='bold')
            self.ax_roc2.legend(loc='upper right', fontsize=9)
            self.ax_roc2.grid(True, alpha=0.3)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–∏–º–æ—Å—Ç–∏
            separation = abs(pos_mean - neg_mean)
            overlap = self._calculate_overlap(positive_scores, negative_scores)
            
            stats_text = f'–†–∞–∑–¥–µ–ª–∏–º–æ—Å—Ç—å: {separation:.3f}\n–ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: {overlap:.1%}\n–ö–∞—á–µ—Å—Ç–≤–æ: {"–í—ã—Å–æ–∫–æ–µ" if separation > 0.3 else "–°—Ä–µ–¥–Ω–µ–µ" if separation > 0.15 else "–ù–∏–∑–∫–æ–µ"}'
            
            self.ax_roc2.text(0.02, 0.98, stats_text,
                            transform=self.ax_roc2.transAxes, fontsize=10, 
                            verticalalignment='top',
                            bbox=dict(boxstyle="round,pad=0.3", facecolor="lightyellow", alpha=0.8))
            
            self.fig_roc.tight_layout()
            self.canvas_roc.draw()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ ROC –∞–Ω–∞–ª–∏–∑–∞: {e}")
            self.ax_roc1.text(0.5, 0.5, f'–û—à–∏–±–∫–∞ ROC –∞–Ω–∞–ª–∏–∑–∞:\n{str(e)}', 
                            ha='center', va='center', transform=self.ax_roc1.transAxes, 
                            fontsize=12, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightcoral"))
            self.canvas_roc.draw()
    
    def _generate_roc_negatives(self, X_positive: np.ndarray) -> np.ndarray:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è ROC"""
        n_samples = len(X_positive)
        mean = np.mean(X_positive, axis=0)
        std = np.std(X_positive, axis=0)
        std = np.maximum(std, mean * 0.1)
        
        negatives = []
        
        # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã "–∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤"
        for i in range(n_samples):
            if i < n_samples // 3:
                # –ë–ª–∏–∑–∫–∏–µ –∏–º–∏—Ç–∞—Ç–æ—Ä—ã
                sample = mean + np.random.normal(0, std * 1.5)
            elif i < 2 * n_samples // 3:
                # –£–º–µ—Ä–µ–Ω–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è
                factors = np.random.uniform(0.5, 2.0, size=len(mean))
                sample = mean * factors
            else:
                # –°–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è
                factors = np.random.uniform(0.2, 4.0, size=len(mean))
                sample = mean * factors
            
            sample = np.maximum(sample, mean * 0.01)
            negatives.append(sample)
        
        return np.array(negatives)
    
    def _calculate_overlap(self, dist1: np.ndarray, dist2: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è –¥–≤—É—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
        min_val = min(np.min(dist1), np.min(dist2))
        max_val = max(np.max(dist1), np.max(dist2))
        
        bins = np.linspace(min_val, max_val, 50)
        hist1, _ = np.histogram(dist1, bins=bins, density=True)
        hist2, _ = np.histogram(dist2, bins=bins, density=True)
        
        overlap = np.sum(np.minimum(hist1, hist2)) * (bins[1] - bins[0])
        return overlap
    
    def _interpret_far(self, far: float) -> str:
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è FAR"""
        if far == 0:
            return "–û–¢–õ–ò–ß–ù–û - –ø–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤"
        elif far < 5:
            return "–û–¢–õ–ò–ß–ù–û - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤"
        elif far < 15:
            return "–•–û–†–û–®–û - –ø—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        else:
            return "–°–†–ï–î–ù–ï - –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    
    def _interpret_frr(self, frr: float) -> str:
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è FRR"""
        if frr < 10:
            return "–û–¢–õ–ò–ß–ù–û - –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        elif frr < 25:
            return "–•–û–†–û–®–û - –ø—Ä–∏–µ–º–ª–µ–º–æ–µ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        else:
            return "–°–†–ï–î–ù–ï - –≤–æ–∑–º–æ–∂–Ω—ã —á–∞—Å—Ç—ã–µ –æ—Ç–∫–∞–∑—ã"
    
    def _interpret_eer(self, eer: float) -> str:
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è EER"""
        if eer < 5:
            return "–û–¢–õ–ò–ß–ù–û - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"
        elif eer < 15:
            return "–•–û–†–û–®–û - —Å–∏—Å—Ç–µ–º–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"
        elif eer < 25:
            return "–°–†–ï–î–ù–ï - –ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
        else:
            return "–¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–Ø - –Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏"
    
    def _generate_security_conclusion(self, current_result: dict, optimal_result: dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        conclusions = []
        
        if current_result['eer'] <= 15:
            conclusions.append("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–∏–æ–º–µ—Ç—Ä–∏–∏")
        
        if current_result['far'] <= 10:
            conclusions.append("‚Ä¢ –•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–ø—ã—Ç–æ–∫ –∏–º–∏—Ç–∞—Ü–∏–∏")
        
        if current_result['frr'] <= 25:
            conclusions.append("‚Ä¢ –ü—Ä–∏–µ–º–ª–µ–º–æ–µ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞")
        
        if optimal_result['eer'] < current_result['eer']:
            diff = current_result['eer'] - optimal_result['eer']
            conclusions.append(f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ EER –Ω–∞ {diff:.1f}% –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ—Ä–æ–≥–∞")
        
        conclusions.append("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
        
        return '\n'.join(conclusions) if conclusions else "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    def _show_theoretical_metrics(self):
        """–ü–æ–∫–∞–∑ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫"""
        # –ì—Ä–∞—Ñ–∏–∫ 1: –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        self.ax_sec1.clear()
        
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        metrics = ['FAR', 'FRR', 'EER']
        theoretical_values = [8.0, 15.0, 11.5]  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ö–æ—Ä–æ—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        colors = ['red', 'blue', 'green']
        
        bars = self.ax_sec1.bar(metrics, theoretical_values, color=colors, alpha=0.7, edgecolor='black')
        
        for bar, value in zip(bars, theoretical_values):
            height = bar.get_height()
            self.ax_sec1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                            f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')
        
        self.ax_sec1.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç (%)')
        self.ax_sec1.set_title('–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)')
        self.ax_sec1.set_ylim(0, max(theoretical_values) * 1.3)
        self.ax_sec1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ü–æ—è—Å–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.ax_sec2.clear()
        self.ax_sec2.text(0.5, 0.7, 'FAR (False Acceptance Rate)', ha='center', va='center', 
                         transform=self.ax_sec2.transAxes, fontsize=14, fontweight='bold', color='red')
        self.ax_sec2.text(0.5, 0.6, '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω–æ –ø—Ä–∏–Ω—è—Ç—ã—Ö –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤', ha='center', va='center', 
                         transform=self.ax_sec2.transAxes, fontsize=11)
        
        self.ax_sec2.text(0.5, 0.4, 'FRR (False Rejection Rate)', ha='center', va='center', 
                         transform=self.ax_sec2.transAxes, fontsize=14, fontweight='bold', color='blue')
        self.ax_sec2.text(0.5, 0.3, '–ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ—á–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤', ha='center', va='center', 
                         transform=self.ax_sec2.transAxes, fontsize=11)
        
        self.ax_sec2.text(0.5, 0.1, 'EER (Equal Error Rate)', ha='center', va='center', 
                         transform=self.ax_sec2.transAxes, fontsize=14, fontweight='bold', color='green')
        self.ax_sec2.text(0.5, 0.0, '–¢–æ—á–∫–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ FAR –∏ FRR (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)', ha='center', va='center', 
                         transform=self.ax_sec2.transAxes, fontsize=11)
        
        self.ax_sec2.set_xlim(0, 1)
        self.ax_sec2.set_ylim(0, 1)
        self.ax_sec2.axis('off')
        
        self.canvas_security.draw()
    
    def _plot_security_metrics(self, results: list, current_result: dict):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        # –ì—Ä–∞—Ñ–∏–∫ 1: –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        self.ax_sec1.clear()
        
        metrics = ['FAR', 'FRR', 'EER']
        values = [current_result['far'], current_result['frr'], current_result['eer']]
        colors = ['red', 'blue', 'green']
        
        bars = self.ax_sec1.bar(metrics, values, color=colors, alpha=0.7, edgecolor='black')
        
        for bar, value in zip(bars, values):
            height = bar.get_height()
            self.ax_sec1.text(bar.get_x() + bar.get_width()/2., height + 1,
                            f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')
        
        self.ax_sec1.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç (%)')
        self.ax_sec1.set_title(f'–ú–µ—Ç—Ä–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø–æ—Ä–æ–≥ {current_result["threshold"]:.0%})')
        self.ax_sec1.set_ylim(0, max(max(values) * 1.2, 20))
        
        # –†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–µ –ª–∏–Ω–∏–∏
        self.ax_sec1.axhline(y=10, color='orange', linestyle='--', alpha=0.7, label='–•–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å')
        self.ax_sec1.axhline(y=25, color='red', linestyle='--', alpha=0.7, label='–ü—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å')
        
        self.ax_sec1.legend()
        self.ax_sec1.grid(True, alpha=0.3)
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: FAR vs FRR vs –ü–æ—Ä–æ–≥
        self.ax_sec2.clear()
        
        thresholds = [r['threshold'] * 100 for r in results]
        far_values = [r['far'] for r in results]
        frr_values = [r['frr'] for r in results]
        
        self.ax_sec2.plot(thresholds, far_values, 'r-o', label='FAR', linewidth=2, markersize=6)
        self.ax_sec2.plot(thresholds, frr_values, 'b-s', label='FRR', linewidth=2, markersize=6)
        self.ax_sec2.axvline(current_result['threshold'] * 100, color='gray', linestyle='--', 
                           alpha=0.7, label='–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥')
        
        self.ax_sec2.set_xlabel('–ü–æ—Ä–æ–≥ (%)')
        self.ax_sec2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ (%)')
        self.ax_sec2.set_title('FAR –∏ FRR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Ä–æ–≥–∞')
        self.ax_sec2.legend()
        self.ax_sec2.grid(True, alpha=0.3)
        
        self.canvas_security.draw()
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.training_samples = self.db.get_user_training_samples(self.user.id)
            self.auth_attempts = self.db.get_auth_attempts(self.user.id, limit=100)
            self.model_info = self.model_manager.get_model_info(self.user.id)
            
            # –û—á–∏—â–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
            self.info_text.delete('1.0', tk.END)
            self.metrics_text.delete('1.0', tk.END)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.load_statistics()
            
            messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            )
            
            if filename:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
                full_report = self.generate_full_report()
                
                if filename.endswith('.json'):
                    # JSON —Ñ–æ—Ä–º–∞—Ç
                    report_data = self.collect_report_data()
                    with open(filename, 'w', encoding='utf-8') as f:
                        json.dump(report_data, f, indent=2, ensure_ascii=False, default=str)
                else:
                    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    with open(filename, 'w', encoding='utf-8') as f:
                        f.write(full_report)
                
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
    
    def generate_full_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–∂–µ—Ç–æ–≤
        general_info = self.info_text.get('1.0', tk.END).strip()
        metrics_info = self.metrics_text.get('1.0', tk.END).strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
        features_info = self._generate_features_summary()
        
        report = f"""–û–¢–ß–ï–¢ –ü–û –°–¢–ê–¢–ò–°–¢–ò–ö–ï –ë–ò–û–ú–ï–¢–†–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´
{'='*80}

{general_info}

üìà –ê–ù–ê–õ–ò–ó –ü–†–ò–ó–ù–ê–ö–û–í –ö–õ–ê–í–ò–ê–¢–£–†–ù–û–ì–û –ü–û–ß–ï–†–ö–ê:
{features_info}

üîí –ú–ï–¢–†–ò–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:
{metrics_info}

üìä ROC-–ê–ù–ê–õ–ò–ó:
{self._generate_roc_summary()}

üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üéì –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""
        return report
    
    def _generate_features_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–∏–∑–Ω–∞–∫–∞–º"""
        if not self.training_samples:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        features_data = []
        for sample in self.training_samples:
            if sample.features:
                features_data.append([
                    sample.features.get('avg_dwell_time', 0) * 1000,
                    sample.features.get('avg_flight_time', 0) * 1000,
                    sample.features.get('typing_speed', 0),
                    sample.features.get('total_typing_time', 0)
                ])
        
        if not features_data:
            return "–ü—Ä–∏–∑–Ω–∞–∫–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è –æ–±—Ä–∞–∑—Ü–æ–≤."
        
        features_array = np.array(features_data)
        feature_names = [
            '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à (–º—Å)',
            '–í—Ä–µ–º—è –º–µ–∂–¥—É –∫–ª–∞–≤–∏—à–∞–º–∏ (–º—Å)',
            '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–∫–ª–∞–≤–∏—à/—Å–µ–∫)',
            '–û–±—â–µ–µ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ (—Å–µ–∫)'
        ]
        
        summary = []
        for i, name in enumerate(feature_names):
            data = features_array[:, i]
            mean_val = np.mean(data)
            std_val = np.std(data)
            cv = (std_val / mean_val * 100) if mean_val > 0 else 0
            
            summary.append(f"‚Ä¢ {name}:")
            summary.append(f"  –°—Ä–µ–¥–Ω–µ–µ: {mean_val:.2f}, –°—Ç–∞–Ω–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {std_val:.2f}")
            summary.append(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏: {cv:.1f}%")
            summary.append("")
        
        return '\n'.join(summary)
    
    def _generate_roc_summary(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–∫–∏ ROC-–∞–Ω–∞–ª–∏–∑–∞"""
        try:
            model = self.model_manager._get_user_model(self.user.id)
            if not model or not hasattr(model, 'is_trained') or not model.is_trained:
                return "ROC-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –º–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞."
            
            return """‚Ä¢ ROC-–∫—Ä–∏–≤–∞—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
‚Ä¢ AUC (Area Under Curve) –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏—è AUC: 0.9+ –æ—Ç–ª–∏—á–Ω–æ, 0.8+ —Ö–æ—Ä–æ—à–æ, 0.7+ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–¥–µ–ª–∏–º–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–æ–≥–æ –ø–æ—á–µ—Ä–∫–∞"""
            
        except Exception:
            return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ROC-—Å–≤–æ–¥–∫–∏."
    
    def collect_report_data(self) -> dict:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è JSON –æ—Ç—á–µ—Ç–∞"""
        data = {
            "user_info": {
                "username": self.user.username,
                "report_date": datetime.now().isoformat(),
                "model_trained": self.user.is_trained,
                "training_samples": len(self.training_samples),
                "auth_attempts": len(self.auth_attempts)
            },
            "features_analysis": self._collect_features_data(),
            "security_metrics": self._collect_security_data(),
            "roc_analysis": self._collect_roc_data()
        }
        return data
    
    def _collect_features_data(self) -> dict:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö"""
        if not self.training_samples:
            return {}
        
        features_data = []
        for sample in self.training_samples:
            if sample.features:
                features_data.append(sample.features)
        
        if not features_data:
            return {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        features_stats = {}
        feature_names = ['avg_dwell_time', 'avg_flight_time', 'typing_speed', 'total_typing_time']
        
        for name in feature_names:
            values = [f.get(name, 0) for f in features_data]
            if values:
                features_stats[name] = {
                    "mean": float(np.mean(values)),
                    "std": float(np.std(values)),
                    "min": float(np.min(values)),
                    "max": float(np.max(values))
                }
        
        return features_stats
    
    def _collect_security_data(self) -> dict:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Ç—Ä–∏–∫–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if len(self.auth_attempts) < 5:
            return {"status": "insufficient_data", "attempts": len(self.auth_attempts)}
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        high_conf = [a for a in self.auth_attempts if a['final_confidence'] >= 0.7]
        low_conf = [a for a in self.auth_attempts if a['final_confidence'] < 0.4]
        
        if high_conf and low_conf:
            # –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            far = len([a for a in low_conf if a['result']]) / len(low_conf) * 100
            frr = len([a for a in high_conf if not a['result']]) / len(high_conf) * 100
            eer = (far + frr) / 2
            
            return {
                "far": far,
                "frr": frr,
                "eer": eer,
                "high_confidence_attempts": len(high_conf),
                "low_confidence_attempts": len(low_conf)
            }
        
        return {"status": "insufficient_variety"}
    
    def _collect_roc_data(self) -> dict:
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö ROC-–∞–Ω–∞–ª–∏–∑–∞"""
        try:
            model = self.model_manager._get_user_model(self.user.id)
            if not model or not hasattr(model, 'is_trained') or not model.is_trained:
                return {"status": "model_not_trained"}
            
            return {
                "status": "available",
                "model_type": type(model).__name__,
                "training_samples": len(self.training_samples)
            }
        except Exception:
            return {"status": "error"}