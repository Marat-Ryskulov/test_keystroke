# gui/enhanced_training_window.py - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è 1920x1080

import tkinter as tk
from tkinter import ttk, messagebox
import time
import threading
from typing import Callable

from models.user import User
from auth.keystroke_auth import KeystrokeAuthenticator
from config import TRAINING_WINDOW_WIDTH, TRAINING_WINDOW_HEIGHT, FONT_FAMILY, FONT_SIZE, MIN_TRAINING_SAMPLES, PANGRAM

class EnhancedTrainingWindow:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    
    def __init__(self, parent, user: User, keystroke_auth: KeystrokeAuthenticator, on_complete: Callable):
        self.parent = parent
        self.user = user
        self.keystroke_auth = keystroke_auth
        self.on_complete = on_complete
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.window = tk.Toplevel(parent)
        self.window.title("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        self.window.geometry(f"{TRAINING_WINDOW_WIDTH}x{TRAINING_WINDOW_HEIGHT}")
        self.window.resizable(True, True)
        self.window.minsize(700, 800)
        
        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.window.transient(parent)
        self.window.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.center_window()
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.session_id = None
        self.is_recording = False
        self.current_sample = 0
        self.training_text = PANGRAM
        self.use_enhanced_training = tk.BooleanVar(value=True)
        self.training_in_progress = False
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.normalized_target = self._normalize_text(PANGRAM)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_scrollable_interface()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.update_progress()
    
    def _normalize_text(self, text: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞"""
        return text.lower().replace(" ", "")
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞"""
        self.window.update_idletasks()
        width = self.window.winfo_width()
        height = self.window.winfo_height()
        x = (self.window.winfo_screenwidth() // 2) - (width // 2)
        y = (self.window.winfo_screenheight() // 2) - (height // 2)
        self.window.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_scrollable_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_canvas = tk.Canvas(self.window)
        scrollbar = ttk.Scrollbar(self.window, orient="vertical", command=main_canvas.yview)
        self.scrollable_frame = ttk.Frame(main_canvas)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: main_canvas.configure(scrollregion=main_canvas.bbox("all"))
        )
        
        main_canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        main_canvas.configure(yscrollcommand=scrollbar.set)
        
        main_canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
        def _on_mousewheel(event):
            main_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        main_canvas.bind("<MouseWheel>", _on_mousewheel)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.create_widgets()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        main_frame = ttk.Frame(self.scrollable_frame, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(
            main_frame,
            text="üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
            font=(FONT_FAMILY, FONT_SIZE + 4, 'bold')
        )
        title_label.pack(pady=(0, 10))
        
        # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è - –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        method_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –ú–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è", padding=10)
        method_frame.pack(fill=tk.X, pady=(0, 10))
        
        enhanced_radio = ttk.Radiobutton(
            method_frame,
            text="üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ (—Å –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π)",
            variable=self.use_enhanced_training,
            value=True
        )
        enhanced_radio.pack(anchor=tk.W)
        
        basic_radio = ttk.Radiobutton(
            method_frame,
            text="‚ö° –ë–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ–µ)",
            variable=self.use_enhanced_training,
            value=False
        )
        basic_radio.pack(anchor=tk.W)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        desc_label = ttk.Label(
            method_frame,
            text="üî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ: –∫—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è + –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n‚ö° –ë–∞–∑–æ–≤–æ–µ: –ø—Ä–æ—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
            font=(FONT_FAMILY, FONT_SIZE-1),
            foreground="gray"
        )
        desc_label.pack(anchor=tk.W, pady=(5, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ - –∫–æ–º–ø–∞–∫—Ç–Ω–æ
        info_frame = ttk.LabelFrame(main_frame, text="üìã –ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è", padding=10)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        info_text = f"""–î–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ {MIN_TRAINING_SAMPLES} –æ–±—Ä–∞–∑—Ü–æ–≤ –≤–∞—à–µ–≥–æ —Å—Ç–∏–ª—è –ø–µ—á–∞—Ç–∏
–ü–∞–Ω–≥—Ä–∞–º–º–∞: "{PANGRAM}"

–ü–†–ê–í–ò–õ–ê:
‚Ä¢ –ü–µ—á–∞—Ç–∞–π—Ç–µ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–º–ø–µ - –ù–ï —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ –Ω–µ –≤–∞–∂–µ–Ω, –ø—Ä–æ–±–µ–ª—ã –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
‚Ä¢ –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–≤–æ–¥ —Å–±—Ä–æ—Å–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"""
        
        info_label = ttk.Label(
            info_frame,
            text=info_text,
            font=(FONT_FAMILY, FONT_SIZE-1),
            justify=tk.LEFT
        )
        info_label.pack()
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_frame = ttk.LabelFrame(main_frame, text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", padding=10)
        progress_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.progress_label = ttk.Label(
            progress_frame,
            text="",
            font=(FONT_FAMILY, FONT_SIZE)
        )
        self.progress_label.pack()
        
        self.progress_bar = ttk.Progressbar(
            progress_frame,
            length=500,
            mode='determinate',
            maximum=MIN_TRAINING_SAMPLES
        )
        self.progress_bar.pack(pady=5)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = ttk.LabelFrame(main_frame, text="‚å®Ô∏è –í–≤–æ–¥", padding=10)
        input_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.pangram_label = ttk.Label(
            input_frame,
            text=f'–í–≤–µ–¥–∏—Ç–µ: "{PANGRAM}"',
            font=(FONT_FAMILY, FONT_SIZE, 'bold'),
            foreground='darkblue'
        )
        self.pangram_label.pack(pady=(0, 5))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤–≤–æ–¥–∞
        self.typing_progress_label = ttk.Label(
            input_frame,
            text="",
            font=(FONT_FAMILY, FONT_SIZE-1, 'italic'),
            foreground='gray'
        )
        self.typing_progress_label.pack()
        
        self.text_entry = ttk.Entry(
            input_frame,
            width=60,
            font=(FONT_FAMILY, FONT_SIZE)
        )
        self.text_entry.pack(pady=5)
        
        self.status_label = ttk.Label(
            input_frame,
            text="",
            font=(FONT_FAMILY, FONT_SIZE-1)
        )
        self.status_label.pack()
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
        training_frame = ttk.LabelFrame(main_frame, text="ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", padding=10)
        training_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.training_status = ttk.Label(
            training_frame,
            text="–°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö",
            font=(FONT_FAMILY, FONT_SIZE)
        )
        self.training_status.pack()
        
        self.training_progress = ttk.Progressbar(
            training_frame,
            length=500,
            mode='indeterminate'
        )
        self.training_progress.pack(pady=5)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=15)
        
        self.submit_btn = ttk.Button(
            button_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞–∑–µ—Ü",
            command=self.submit_sample,
            state=tk.DISABLED
        )
        self.submit_btn.pack(side=tk.LEFT, padx=5)
        
        self.train_btn = ttk.Button(
            button_frame,
            text="üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å",
            command=self.start_training,
            state=tk.DISABLED
        )
        self.train_btn.pack(side=tk.LEFT, padx=5)
        
        cancel_btn = ttk.Button(
            button_frame,
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            command=self.window.destroy
        )
        cancel_btn.pack(side=tk.LEFT, padx=5)
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
        self.setup_keystroke_recording()
        self.text_entry.bind('<Return>', lambda e: self.submit_sample())
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.text_entry.focus()
    
    def setup_keystroke_recording(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π"""
        self.text_entry.bind('<FocusIn>', self.start_recording)
        self.text_entry.bind('<FocusOut>', self.stop_recording)
        self.text_entry.bind('<KeyPress>', self.on_key_press)
        self.text_entry.bind('<KeyRelease>', self.on_key_release)
        self.text_entry.bind('<KeyRelease>', self.check_input, add='+')
    
    def start_recording(self, event=None):
        """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏"""
        if not self.is_recording:
            self.session_id = self.keystroke_auth.start_keystroke_recording(self.user.id)
            self.is_recording = True
            self.status_label.config(
                text="üî¥ –ó–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–∞",
                foreground="red"
            )
    
    def stop_recording(self, event=None):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏"""
        if self.is_recording:
            self.is_recording = False
            self.status_label.config(
                text="‚è∏Ô∏è –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                foreground="gray"
            )
    
    def on_key_press(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if self.is_recording and self.session_id:
            if event.keysym not in ['Shift_L', 'Shift_R', 'Control_L', 'Control_R', 
                                   'Alt_L', 'Alt_R', 'Caps_Lock', 'Tab']:
                self.keystroke_auth.record_key_event(
                    self.session_id,
                    event.keysym,
                    'press'
                )
    
    def on_key_release(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if self.is_recording and self.session_id:
            if event.keysym not in ['Shift_L', 'Shift_R', 'Control_L', 'Control_R', 
                                   'Alt_L', 'Alt_R', 'Caps_Lock', 'Tab']:
                self.keystroke_auth.record_key_event(
                    self.session_id,
                    event.keysym,
                    'release'
                )
    
    def check_input(self, event=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞"""
        current_text = self.text_entry.get()
        normalized_current = self._normalize_text(current_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å–∞
        if len(normalized_current) > len(self.normalized_target):
            self._reset_input("‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π")
            return
        
        is_correct_prefix = True
        for i, char in enumerate(normalized_current):
            if i >= len(self.normalized_target) or char != self.normalized_target[i]:
                is_correct_prefix = False
                break
        
        if not is_correct_prefix:
            self._reset_input("‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ–∫—Å—Ç–µ")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–≤–æ–¥–∞
        progress_text = f"üìù {len(normalized_current)}/{len(self.normalized_target)} —Å–∏–º–≤–æ–ª–æ–≤"
        if len(normalized_current) > 0:
            progress_text += f" | '{current_text[-min(8, len(current_text)):]}'"
        self.typing_progress_label.config(text=progress_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å
        if normalized_current == self.normalized_target:
            self.submit_btn.config(state=tk.NORMAL)
            self.status_label.config(
                text="‚úÖ –¢–µ–∫—Å—Ç –≤–≤–µ–¥–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.",
                foreground="green"
            )
        else:
            self.submit_btn.config(state=tk.DISABLED)
            if len(normalized_current) > 0:
                self.status_label.config(
                    text="‚å®Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–≤–æ–¥...",
                    foreground="blue"
                )
            else:
                self.status_label.config(
                    text="üí≠ –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥ –ø–∞–Ω–≥—Ä–∞–º–º—ã",
                    foreground="black"
                )
    
    def _reset_input(self, message: str):
        """–°–±—Ä–æ—Å –≤–≤–æ–¥–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
        if self.is_recording:
            self.stop_recording()
            if self.session_id:
                if self.session_id in self.keystroke_auth.current_session:
                    del self.keystroke_auth.current_session[self.session_id]
                self.session_id = None
        
        self.text_entry.delete(0, tk.END)
        self.status_label.config(text=message, foreground="red")
        self.typing_progress_label.config(text="")
        self.submit_btn.config(state=tk.DISABLED)
        
        self.window.after(1500, self._clear_error_and_restart)
    
    def _clear_error_and_restart(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –Ω–æ–≤–æ–º—É –≤–≤–æ–¥—É"""
        self.status_label.config(text="üîÑ –ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ", foreground="black")
        self.text_entry.focus()
    
    def submit_sample(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞"""
        current_text = self.text_entry.get()
        normalized_current = self._normalize_text(current_text)
        
        if normalized_current != self.normalized_target:
            messagebox.showwarning("‚ùå –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ –ø–∞–Ω–≥—Ä–∞–º–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return
        
        if self.session_id and self.is_recording:
            try:
                self.stop_recording()
                
                features = self.keystroke_auth.finish_recording(self.session_id, is_training=True)
                
                if not features or all(v == 0 for v in features.values()):
                    messagebox.showwarning(
                        "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É –Ω–∞–∂–∞—Ç–∏–π.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ."
                    )
                    self.text_entry.delete(0, tk.END)
                    self.text_entry.focus()
                    return
                
                self.current_sample += 1
                
                self.status_label.config(
                    text=f"‚úÖ –û–±—Ä–∞–∑–µ—Ü {self.current_sample} —Å–æ—Ö—Ä–∞–Ω–µ–Ω",
                    foreground="green"
                )
                
                self.text_entry.delete(0, tk.END)
                self.typing_progress_label.config(text="")
                
                self.update_progress()
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑—Ü–æ–º
                self.text_entry.config(state=tk.DISABLED)
                self.status_label.config(
                    text="‚è≥ –ü–∞—É–∑–∞... –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É",
                    foreground="blue"
                )
                
                self.window.after(1500, self._enable_next_input)
                
            except Exception as e:
                messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
                self.text_entry.delete(0, tk.END)
                self.text_entry.focus()
        else:
            messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏")
    
    def _enable_next_input(self):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤–≤–æ–¥–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"""
        self.text_entry.config(state=tk.NORMAL)
        self.text_entry.focus()
        self.status_label.config(text="üìù –ì–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—Ä–∞–∑—Ü—É", foreground="black")
    
    def update_progress(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        progress = self.keystroke_auth.get_training_progress(self.user)
        
        self.current_sample = progress['current_samples']
        self.progress_label.config(
            text=f"üìä –û–±—Ä–∞–∑—Ü–æ–≤: {progress['current_samples']}/{progress['required_samples']}"
        )
        
        self.progress_bar['value'] = progress['current_samples']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é
        if progress['is_ready']:
            self.train_btn.config(state=tk.NORMAL)
            self.pangram_label.config(
                text="‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤! –ú–æ–∂–µ—Ç–µ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å.",
                foreground="green"
            )
            self.training_status.config(
                text="‚úÖ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –∫ –æ–±—É—á–µ–Ω–∏—é –º–æ–¥–µ–ª–∏"
            )
        else:
            remaining = progress['required_samples'] - progress['current_samples']
            self.pangram_label.config(
                text=f'–í–≤–µ–¥–∏—Ç–µ: "{PANGRAM}" (–æ—Å—Ç–∞–ª–æ—Å—å {remaining} —Ä–∞–∑)',
                foreground="darkblue"
            )
    
    def start_training(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if self.training_in_progress:
            return
        
        method_text = "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π" if self.use_enhanced_training.get() else "–±–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
        
        if messagebox.askyesno(
            "üöÄ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–ù–∞—á–∞—Ç—å {method_text}?\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
        ):
            self.training_in_progress = True
            self.train_btn.config(state=tk.DISABLED, text="üîÑ –û–±—É—á–µ–Ω–∏–µ...")
            self.training_status.config(text="ü§ñ –°—Ç–∞—Ç—É—Å: –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            self.training_progress.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(target=self._train_model_thread, daemon=True).start()
    
    def _train_model_thread(self):
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            from ml.model_manager import ModelManager
            
            model_manager = ModelManager()
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è
            use_enhanced = self.use_enhanced_training.get()
            
            success, accuracy, message = model_manager.train_user_model(
                self.user.id, 
                use_enhanced_training=use_enhanced
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.window.after(0, lambda: self._training_completed(success, accuracy, message, use_enhanced))
            
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}"
            self.window.after(0, lambda: self._training_completed(False, 0.0, error_message, False))
    
    def _training_completed(self, success: bool, accuracy: float, message: str, use_enhanced: bool):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"""
        self.training_in_progress = False
        self.training_progress.stop()
        self.train_btn.config(state=tk.NORMAL, text="üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
        
        if success:
            self.training_status.config(
                text=f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}"
            )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            if use_enhanced:
                try:
                    from ml.model_manager import ModelManager
                    model_manager = ModelManager()
                    report = model_manager.get_training_report(self.user.id)
                    
                    if report:
                        additional_info = f"""üî¨ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø:

üìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ç–µ—Å—Ç–µ: {accuracy:.1%}
‚Ä¢ –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {report.get('training_duration', 0):.1f} —Å–µ–∫
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞: {report.get('dataset_size', 0)} –æ–±—Ä–∞–∑—Ü–æ–≤

‚öôÔ∏è –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
{self._format_params(report.get('best_params', {}))}

üìà –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.
üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω."""
                        
                        messagebox.showinfo("üéâ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", additional_info)
                    else:
                        messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"{message}\n\n–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
                        
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
                    messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"{message}\n\n–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            else:
                messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", f"{message}\n\n–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            
            self.on_complete()
            self.window.destroy()
        else:
            self.training_status.config(text="‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", message)
    
    def _format_params(self, params: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not params:
            return "‚Ä¢ –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
        
        formatted = []
        for key, value in params.items():
            if key == 'n_neighbors':
                formatted.append(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Å–µ–¥–µ–π: {value}")
            elif key == 'weights':
                formatted.append(f"‚Ä¢ –í–µ—Å–∞: {value}")
            elif key == 'metric':
                formatted.append(f"‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∞: {value}")
            elif key == 'algorithm':
                formatted.append(f"‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º: {value}")
            else:
                formatted.append(f"‚Ä¢ {key}: {value}")
        
        return "\n".join(formatted)