# auth/keystroke_auth.py - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–∂–∞—Ç–∏–π

from typing import Tuple, Optional, Dict
from datetime import datetime
import uuid

from models.user import User
from models.keystroke_data import KeystrokeData
from ml.model_manager import ModelManager
from utils.database import DatabaseManager
from utils.security import SecurityManager

class KeystrokeAuthenticator:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à"""
    
    def __init__(self):
        self.db = DatabaseManager()
        self.model_manager = ModelManager()
        self.security = SecurityManager()
        self.current_session = {}  # –¢–µ–∫—É—â–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞–∂–∞—Ç–∏–π
    
    def start_keystroke_recording(self, user_id: int) -> str:
        """
        –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç session_id
        """
        session_id = self.security.generate_session_id()
        
        self.current_session[session_id] = KeystrokeData(
            user_id=user_id,
            session_id=session_id,
            timestamp=datetime.now()
        )
        
        print(f"üé¨ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏: {session_id[:8]}")
        return session_id
    
    def record_key_event(self, session_id: str, key: str, event_type: str):
        """–ó–∞–ø–∏—Å—å —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏—à–∏"""
        if session_id not in self.current_session:
            print(f"‚ö†Ô∏è –°–µ—Å—Å–∏—è {session_id[:8]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            raise ValueError("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        self.current_session[session_id].add_key_event(key, event_type)
        print(f"‚å®Ô∏è –ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type} {key} –≤ —Å–µ—Å—Å–∏–∏ {session_id[:8]}")
    
    def finish_recording(self, session_id: str, is_training: bool = False) -> Dict[str, float]:
        """
        –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        """
        if session_id not in self.current_session:
            print(f"‚ùå –°–µ—Å—Å–∏—è {session_id[:8]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏!")
            raise ValueError("–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
        keystroke_data = self.current_session[session_id]
        
        print(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏ {session_id[:8]}")
        print(f"üìä –°–æ–±—ã—Ç–∏–π –≤ —Å–µ—Å—Å–∏–∏: {len(keystroke_data.key_events)}")
    
        # –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –≤—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        features = keystroke_data.calculate_features()
        
        print(f"üî¢ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {features}")
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–∑–Ω–∞–∫–∏ –±—ã–ª–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
        if not features or all(v == 0 for v in features.values()):
            print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—Ä–∞–∑—Ü–∞")
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            features = {
                'avg_dwell_time': 0.0,
                'std_dwell_time': 0.0,
                'avg_flight_time': 0.0,
                'std_flight_time': 0.0,
                'typing_speed': 0.0,
                'total_typing_time': 0.0
            }
            keystroke_data.features = features
    
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î –µ—Å–ª–∏ —ç—Ç–æ –æ–±—É—á–∞—é—â–∏–π –æ–±—Ä–∞–∑–µ—Ü
        if is_training:
            try:
                self.db.save_keystroke_sample(keystroke_data, is_training=True)
                print(f"üíæ –û–±—É—á–∞—é—â–∏–π –æ–±—Ä–∞–∑–µ—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞–∂–∞—Ç–∏—è—Ö
                user = self.db.get_user_by_id(keystroke_data.user_id)
                if user:
                    try:
                        keystroke_data.save_raw_events_to_csv(user.id, user.username)
                        print(f"üìÅ CSV —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è CSV: {e}")
    
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Å—Å–∏–π
        del self.current_session[session_id]
        print(f"üóëÔ∏è –°–µ—Å—Å–∏—è {session_id[:8]} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏")
    
        return features
    
    def authenticate(self, user, keystroke_features: Dict[str, float]) -> Tuple[bool, float, str]:
        """
        –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Å —á–µ—Å—Ç–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        if not user.is_trained:
            return False, 0.0, "–ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–±—É—á–µ–Ω–∞."

        print(f"\nüîê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        print(f"üìä –í—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: {keystroke_features}")

        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ ModelManager
        is_authenticated, confidence, detailed_stats = self.model_manager.authenticate_user_detailed(
            user.id, keystroke_features
        )

        print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü–†–ò–ù–Ø–¢' if is_authenticated else '‚ùå –û–¢–ö–õ–û–ù–ï–ù'}")
        print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%}")
        print(f"üö™ –ü–æ—Ä–æ–≥: {detailed_stats.get('threshold', 0.5):.0%}")

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print(f"\n{'='*60}")
        print(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò - {user.username}")
        print(f"{'='*60}")
        print(f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"üéØ –°—Ç–∞—Ç—É—Å: {'‚úÖ –î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù' if is_authenticated else '‚ùå –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù'}")
        print(f"üé≤ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {confidence:.1%}")
        print(f"üö™ –ü–æ—Ä–æ–≥ –ø—Ä–∏–Ω—è—Ç–∏—è: {detailed_stats.get('threshold', 0.5):.0%}")
        print()

        print("üìä –í–ê–®–ò –ü–†–ò–ó–ù–ê–ö–ò –ö–õ–ê–í–ò–ê–¢–£–†–ù–û–ì–û –ü–û–ß–ï–†–ö–ê:")
        print(f"‚îú‚îÄ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à: {keystroke_features.get('avg_dwell_time', 0)*1000:.1f} –º—Å")
        print(f"‚îú‚îÄ –í—Ä–µ–º—è –º–µ–∂–¥—É –∫–ª–∞–≤–∏—à–∞–º–∏: {keystroke_features.get('avg_flight_time', 0)*1000:.1f} –º—Å")
        print(f"‚îú‚îÄ –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏: {keystroke_features.get('typing_speed', 0):.1f} –∫–ª–∞–≤–∏—à/—Å–µ–∫")
        print(f"‚îî‚îÄ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞: {keystroke_features.get('total_typing_time', 0):.1f} —Å–µ–∫")
        print()

        print("üéØ –†–ï–®–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´:")
        threshold = detailed_stats.get('threshold', 0.5)
        if confidence >= threshold:
            print(f"‚úÖ {confidence:.1%} ‚â• {threshold:.0%} ‚Üí –î–û–°–¢–£–ü –†–ê–ó–†–ï–®–ï–ù")
            print("üí° –í–∞—à —Å—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±—É—á–µ–Ω–Ω–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é")
        else:
            print(f"‚ùå {confidence:.1%} < {threshold:.0%} ‚Üí –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù")
            print("üí° –°—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—É—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è")

        print("="*60)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        try:
            analysis_data = {
                'user_name': user.username,
                'result': is_authenticated,
                'confidence': confidence,
                'threshold': detailed_stats.get('threshold', 0.5),
                'keystroke_features': keystroke_features,
                'timestamp': datetime.now().isoformat()
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import json
            import os
            from config import DATA_DIR
            temp_dir = os.path.join(DATA_DIR, 'temp')
            os.makedirs(temp_dir, exist_ok=True)

            with open(os.path.join(temp_dir, 'last_auth_analysis.json'), 'w') as f:
                json.dump(analysis_data, f, indent=2)

            print("üíæ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_authenticated:
            message = f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"
        else:
            message = f"–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.1%})"

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            auth_session_id = self.security.generate_session_id()
        
            self.db.save_auth_attempt(
                user_id=user.id,
                session_id=auth_session_id,
                features=keystroke_features,
                knn_confidence=confidence,  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ confidence –º–æ–¥–µ–ª–∏
                distance_score=0.0,  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
                feature_score=0.0,   # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
                final_confidence=confidence,
                threshold=detailed_stats.get('threshold', 0.5),
                result=is_authenticated
            )
            print(f"üìä –ü–æ–ø—ã—Ç–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")

        return is_authenticated, confidence, message
    
    def train_user_model(self, user: User) -> Tuple[bool, float, str]:
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Å–ø–µ—Ö, —Ç–æ—á–Ω–æ—Å—Ç—å, —Å–æ–æ–±—â–µ–Ω–∏–µ)
        """
        print(f"\nüéì –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
        return self.model_manager.train_user_model(user.id, use_enhanced_training=False)
    
    def get_training_progress(self, user: User) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        samples = self.db.get_user_training_samples(user.id)
        
        from config import MIN_TRAINING_SAMPLES
        
        progress = {
            'current_samples': len(samples),
            'required_samples': MIN_TRAINING_SAMPLES,
            'progress_percent': min(100, (len(samples) / MIN_TRAINING_SAMPLES) * 100),
            'is_ready': len(samples) >= MIN_TRAINING_SAMPLES,
            'is_trained': user.is_trained
        }
        
        print(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è {user.username}: {progress['current_samples']}/{progress['required_samples']} –æ–±—Ä–∞–∑—Ü–æ–≤")
        return progress
    
    def reset_user_model(self, user: User) -> Tuple[bool, str]:
        """–°–±—Ä–æ—Å –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            print(f"üîÑ –°–±—Ä–æ—Å –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            self.model_manager.delete_user_model(user.id)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ –ë–î
            self.db.delete_user_samples(user.id)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.is_trained = False
            user.training_samples = 0
            self.db.update_user(user)
            
            print(f"‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞")
            return True, "–ú–æ–¥–µ–ª—å –∏ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–æ–¥–µ–ª–∏: {e}")
            return False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –º–æ–¥–µ–ª–∏: {str(e)}"
    
    def get_authentication_stats(self, user: User) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username}")
    
        # –û–±—É—á–∞—é—â–∏–µ –æ–±—Ä–∞–∑—Ü—ã
        training_samples = self.db.get_user_training_samples(user.id)
    
        # –í–°–ï –æ–±—Ä–∞–∑—Ü—ã (–≤–∫–ª—é—á–∞—è –ø–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∫ –æ–±—Ä–∞–∑—Ü—ã)
        all_samples = self.db.get_user_keystroke_samples(user.id, training_only=False)
    
        # –ü–æ–ø—ã—Ç–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        auth_attempts = self.db.get_auth_attempts(user.id, limit=100)
    
        stats = {
            'total_samples': len(all_samples),
            'training_samples': len(training_samples),
            'authentication_attempts': len(auth_attempts),
            'model_info': self.model_manager.get_model_info(user.id)
        }
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        return stats