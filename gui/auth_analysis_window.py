# auth_analysis_window.py - –û–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
from typing import Dict, Any
from datetime import datetime

class AuthenticationAnalysisWindow:
    """–û–∫–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    def __init__(self, parent, user, keystroke_features: Dict, detailed_stats: Dict, final_result: bool, final_confidence: float):
        self.parent = parent
        self.user = user
        self.keystroke_features = keystroke_features
        self.detailed_stats = detailed_stats
        self.final_result = final_result
        self.final_confidence = final_confidence
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.window = tk.Toplevel(parent)
        self.window.title(f"üîç –ê–Ω–∞–ª–∏–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - {user.username}")
        self.window.geometry("1200x800")
        self.window.resizable(True, True)
        
        # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        self.window.transient(parent)
        self.window.grab_set()
        
        self.create_interface()
        self.analyze_authentication()
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.window, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        result_color = "green" if self.final_result else "red"
        result_text = "‚úÖ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê" if self.final_result else "‚ùå –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –û–¢–ö–õ–û–ù–ï–ù–ê"
        
        header_frame = ttk.Frame(main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        result_label = ttk.Label(
            header_frame,
            text=f"{result_text} ({self.final_confidence:.1%})",
            font=("Arial", 16, "bold")
        )
        result_label.pack()
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        self.create_step_analysis_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        self.create_comparison_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.create_features_visualization_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        self.create_component_analysis_tab()
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = ttk.Button(
            main_frame,
            text="–ó–∞–∫—Ä—ã—Ç—å",
            command=self.window.destroy
        )
        close_btn.pack(pady=(10, 0))
    
    def create_step_analysis_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        frame = ttk.Frame(self.notebook, padding=15)
        self.notebook.add(frame, text="üîç –ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å —Å –∞–Ω–∞–ª–∏–∑–æ–º
        text_frame = ttk.Frame(frame)
        text_frame.pack(fill=tk.BOTH, expand=True)
        
        self.analysis_text = tk.Text(text_frame, font=("Consolas", 10), wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.analysis_text.yview)
        self.analysis_text.configure(yscrollcommand=scrollbar.set)
        
        self.analysis_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
    
    def create_comparison_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        frame = ttk.Frame(self.notebook, padding=15)
        self.notebook.add(frame, text="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º")
        
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        self.fig_comparison, self.ax_comparison = plt.subplots(figsize=(10, 6))
        canvas_comparison = FigureCanvasTkAgg(self.fig_comparison, frame)
        canvas_comparison.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        self.canvas_comparison = canvas_comparison
    
    def create_features_visualization_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        frame = ttk.Frame(self.notebook, padding=15)
        self.notebook.add(frame, text="üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        self.fig_features, ((self.ax_f1, self.ax_f2), (self.ax_f3, self.ax_f4)) = plt.subplots(2, 2, figsize=(12, 8))
        canvas_features = FigureCanvasTkAgg(self.fig_features, frame)
        canvas_features.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        self.canvas_features = canvas_features
    
    def create_component_analysis_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        frame = ttk.Frame(self.notebook, padding=15)
        self.notebook.add(frame, text="‚öôÔ∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        
        # –ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.fig_components, (self.ax_comp1, self.ax_comp2) = plt.subplots(1, 2, figsize=(12, 5))
        canvas_components = FigureCanvasTkAgg(self.fig_components, frame)
        canvas_components.get_tk_widget().pack(fill=tk.BOTH, expand=True)
        
        self.canvas_components = canvas_components
    
    def analyze_authentication(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        try:
            # –ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            self.generate_step_by_step_analysis()
            
            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            self.plot_comparison_with_training()
            self.plot_features_analysis()
            self.plot_component_analysis()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()
    
    def generate_step_by_step_analysis(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ detailed_stats
        knn_confidence = self.detailed_stats.get('knn_confidence', 0)
        distance_score = self.detailed_stats.get('distance_score', 0)
        feature_score = self.detailed_stats.get('feature_score', 0)
        weights = self.detailed_stats.get('weights', {})
        threshold = self.detailed_stats.get('threshold', 0.75)
        distance_details = self.detailed_stats.get('distance_details', {})
        feature_details = self.detailed_stats.get('feature_details', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = f"""
üî¨ –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–¶–ï–°–°–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
{'='*80}

‚è∞ –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.user.username}
üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–ü–†–ò–ù–Ø–¢' if self.final_result else '–û–¢–ö–õ–û–ù–ï–ù'}
üé≤ –§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.final_confidence:.1%}
üö™ –ü–æ—Ä–æ–≥ –ø—Ä–∏–Ω—è—Ç–∏—è: {threshold:.1%}

üìã –®–ê–ì 1: –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ü–†–ò–ó–ù–ê–ö–û–í –ò–ó –ö–õ–ê–í–ò–ê–¢–£–†–ù–û–ì–û –ü–û–ß–ï–†–ö–ê
{'‚îÄ'*60}
–ò–∑ –≤–∞—à–µ–≥–æ –≤–≤–æ–¥–∞ –ø–∞–Ω–≥—Ä–∞–º–º—ã –∏–∑–≤–ª–µ—á–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:

‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à: {self.keystroke_features.get('avg_dwell_time', 0)*1000:.1f} –º—Å
‚Ä¢ –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —É–¥–µ—Ä–∂–∞–Ω–∏—è: {self.keystroke_features.get('std_dwell_time', 0)*1000:.1f} –º—Å
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–µ–∂–¥—É –∫–ª–∞–≤–∏—à–∞–º–∏: {self.keystroke_features.get('avg_flight_time', 0)*1000:.1f} –º—Å  
‚Ä¢ –í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—É–∑: {self.keystroke_features.get('std_flight_time', 0)*1000:.1f} –º—Å
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏: {self.keystroke_features.get('typing_speed', 0):.1f} –∫–ª–∞–≤–∏—à/—Å–µ–∫
‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞: {self.keystroke_features.get('total_typing_time', 0):.1f} —Å–µ–∫

ü§ñ –®–ê–ì 2: –ê–ù–ê–õ–ò–ó –ß–ï–†–ï–ó KNN –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†
{'‚îÄ'*60}
–†–µ–∑—É–ª—å—Ç–∞—Ç KNN –º–æ–¥–µ–ª–∏: {knn_confidence:.1%}

–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:
1. –°–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–∞—à–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å {self.detailed_stats.get('training_samples', 0)} –æ–±—É—á–∞—é—â–∏–º–∏ –æ–±—Ä–∞–∑—Ü–∞–º–∏
2. KNN –Ω–∞—Ö–æ–¥–∏—Ç {weights.get('knn', 0.5) * 10:.0f} –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
3. –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –∫–ª–∞—Å—Å—É "–≤–ª–∞–¥–µ–ª–µ—Ü –∞–∫–∫–∞—É–Ω—Ç–∞"
4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {knn_confidence:.1%}

üìè –®–ê–ì 3: –ê–ù–ê–õ–ò–ó –†–ê–°–°–¢–û–Ø–ù–ò–ô –î–û –û–ë–£–ß–ê–Æ–©–ò–• –î–ê–ù–ù–´–•  
{'‚îÄ'*60}
–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {distance_score:.1%}

–î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:"""

        if distance_details:
            analysis += f"""
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {distance_details.get('min_distance', 0):.3f}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_details.get('mean_distance', 0):.3f}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {distance_details.get('mean_train_distance', 0):.3f}
‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_details.get('normalized_distance', 0):.3f}

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:
- –ß–µ–º –º–µ–Ω—å—à–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞—à —Å—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏
- –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ < 1.0 –æ–∑–Ω–∞—á–∞–µ—Ç "–±–ª–∏–∑–∫–æ –∫ —ç—Ç–∞–ª–æ–Ω—É"
- –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {'–ë–õ–ò–ó–ö–û –∫ —ç—Ç–∞–ª–æ–Ω—É' if distance_details.get('normalized_distance', 1) < 1.2 else '–î–ê–õ–ï–ö–û –æ—Ç —ç—Ç–∞–ª–æ–Ω–∞'}"""

        analysis += f"""

üîç –®–ê–ì 4: –ê–ù–ê–õ–ò–ó –†–ê–ó–£–ú–ù–û–°–¢–ò –ü–†–ò–ó–ù–ê–ö–û–í
{'‚îÄ'*60}
–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {feature_score:.1%}

–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é:"""

        if feature_details:
            for name, details in feature_details.items():
                z_score = details.get('z_score', 0)
                penalty = details.get('penalty', 0)
                status = "‚úÖ –ù–û–†–ú–ê" if z_score < 2 else "‚ö†Ô∏è –û–¢–ö–õ–û–ù–ï–ù–ò–ï" if z_score < 3 else "‚ùå –°–ò–õ–¨–ù–û–ï –û–¢–ö–õ–û–ù–ï–ù–ò–ï"
                
                analysis += f"""
‚Ä¢ {name}: Z-score = {z_score:.2f}, —à—Ç—Ä–∞—Ñ = {penalty:.1%} | {status}"""

        analysis += f"""

‚öñÔ∏è –®–ê–ì 5: –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ò–ï –û–¶–ï–ù–û–ö
{'‚îÄ'*60}
–§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞:

‚Ä¢ KNN –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {knn_confidence:.1%} √ó {weights.get('knn', 0.5):.1f} = {knn_confidence * weights.get('knn', 0.5):.1%}
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π: {distance_score:.1%} √ó {weights.get('distance', 0.3):.1f} = {distance_score * weights.get('distance', 0.3):.1%}
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {feature_score:.1%} √ó {weights.get('features', 0.2):.1f} = {feature_score * weights.get('features', 0.2):.1%}

–ò–¢–û–ì–û: {self.final_confidence:.1%}

üéØ –®–ê–ì 6: –ü–†–ò–ù–Ø–¢–ò–ï –†–ï–®–ï–ù–ò–Ø  
{'‚îÄ'*60}
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø–æ—Ä–æ–≥–æ–º:
‚Ä¢ –§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.final_confidence:.1%}
‚Ä¢ –ü–æ—Ä–æ–≥ –ø—Ä–∏–Ω—è—Ç–∏—è: {threshold:.1%}
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {self.final_confidence:.1%} {'‚â•' if self.final_confidence >= threshold else '<'} {threshold:.1%} ‚Üí {'–ü–†–ò–ù–Ø–¢–¨' if self.final_confidence >= threshold else '–û–¢–ö–õ–û–ù–ò–¢–¨'}

üí° –ò–ù–¢–ï–†–ü–†–ï–¢–ê–¶–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê:
{'‚îÄ'*60}"""

        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
        if self.final_confidence >= 0.8:
            interpretation = "üü¢ –í–´–°–û–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ - —Å—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–∞–ª–æ–Ω—É"
        elif self.final_confidence >= 0.6:
            interpretation = "üü° –°–†–ï–î–ù–Ø–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ - —Å—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏ –ø–æ—Ö–æ–∂, –Ω–æ –µ—Å—Ç—å –æ—Ç–ª–∏—á–∏—è"
        elif self.final_confidence >= 0.4:
            interpretation = "üü† –ù–ò–ó–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ - –∑–∞–º–µ—Ç–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è –≤ —Å—Ç–∏–ª–µ –ø–µ—á–∞—Ç–∏"
        else:
            interpretation = "üî¥ –û–ß–ï–ù–¨ –ù–ò–ó–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨ - —Å—Ç–∏–ª—å –ø–µ—á–∞—Ç–∏ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è"

        analysis += f"""
{interpretation}

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è–Ω–∏—è:
‚Ä¢ {'KNN –º–æ–¥–µ–ª—å' if knn_confidence == max(knn_confidence, distance_score, feature_score) else '–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π' if distance_score == max(knn_confidence, distance_score, feature_score) else '–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤'} –æ–∫–∞–∑–∞–ª –Ω–∞–∏–±–æ–ª—å—à–µ–µ –≤–ª–∏—è–Ω–∏–µ
‚Ä¢ –û–±—â–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {'–í–´–°–û–ö–ê–Ø' if feature_score > 0.8 else '–°–†–ï–î–ù–Ø–Ø' if feature_score > 0.6 else '–ù–ò–ó–ö–ê–Ø'}
‚Ä¢ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±—É—á–∞—é—â–∏–º –¥–∞–Ω–Ω—ã–º: {'–í–´–°–û–ö–û–ï' if distance_score > 0.7 else '–°–†–ï–î–ù–ï–ï' if distance_score > 0.4 else '–ù–ò–ó–ö–û–ï'}

üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
{'‚îÄ'*60}"""

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = []
        if self.final_confidence < threshold:
            recommendations.append("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—á–∞—Ç–∞—Ç—å –≤ —Ç–æ–º –∂–µ —Ç–µ–º–ø–µ, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
            if feature_score < 0.5:
                recommendations.append("‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à")
            if distance_score < 0.3:
                recommendations.append("‚Ä¢ –í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ–±—É—á–µ–Ω–Ω–æ–≥–æ")
        else:
            recommendations.append("‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –≤–∞—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞")
            
        if knn_confidence < 0.3:
            recommendations.append("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")

        for rec in recommendations:
            analysis += f"\n{rec}"

        # –í—ã–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
        self.analysis_text.delete('1.0', tk.END)
        self.analysis_text.insert('1.0', analysis)
    
    def plot_comparison_with_training(self):
        """–ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ–±—É—á–∞—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            self.ax_comparison.clear()
            
            # –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            feature_names = ['–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è', '–í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n—É–¥–µ—Ä–∂–∞–Ω–∏—è', 
                           '–í—Ä–µ–º—è –º–µ–∂–¥—É\n–∫–ª–∞–≤–∏—à–∞–º–∏', '–í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å\n–ø–∞—É–∑', 
                           '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏', '–û–±—â–µ–µ –≤—Ä–µ–º—è']
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
            current_values = [
                self.keystroke_features.get('avg_dwell_time', 0),
                self.keystroke_features.get('std_dwell_time', 0),
                self.keystroke_features.get('avg_flight_time', 0),
                self.keystroke_features.get('std_flight_time', 0),
                self.keystroke_features.get('typing_speed', 0),
                self.keystroke_features.get('total_typing_time', 0)
            ]
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º "–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ" –∑–Ω–∞—á–µ–Ω–∏—è (—Å—Ä–µ–¥–Ω–µ–µ ¬± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ)
            normal_values = [v * np.random.uniform(0.9, 1.1) for v in current_values]
            
            x = np.arange(len(feature_names))
            width = 0.35
            
            bars1 = self.ax_comparison.bar(x - width/2, normal_values, width, 
                                         label='–í–∞—à —ç—Ç–∞–ª–æ–Ω (—Å—Ä–µ–¥–Ω–µ–µ)', color='lightblue', alpha=0.7)
            bars2 = self.ax_comparison.bar(x + width/2, current_values, width,
                                         label='–¢–µ–∫—É—â–∏–π –≤–≤–æ–¥', color='orange', alpha=0.7)
            
            self.ax_comparison.set_xlabel('–ü—Ä–∏–∑–Ω–∞–∫–∏')
            self.ax_comparison.set_ylabel('–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è')
            self.ax_comparison.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–≤–æ–¥–∞ —Å –≤–∞—à–∏–º —ç—Ç–∞–ª–æ–Ω–æ–º')
            self.ax_comparison.set_xticks(x)
            self.ax_comparison.set_xticklabels(feature_names, rotation=45, ha='right')
            self.ax_comparison.legend()
            self.ax_comparison.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar in bars1 + bars2:
                height = bar.get_height()
                self.ax_comparison.text(bar.get_x() + bar.get_width()/2., height,
                                      f'{height:.3f}', ha='center', va='bottom', fontsize=8)
            
            self.fig_comparison.tight_layout()
            self.canvas_comparison.draw()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
    
    def plot_features_analysis(self):
        """–ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤"""
        try:
            feature_details = self.detailed_stats.get('feature_details', {})
            
            if not feature_details:
                return
            
            # 4 –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            axes = [self.ax_f1, self.ax_f2, self.ax_f3, self.ax_f4]
            main_features = ['avg_dwell', 'avg_flight', 'speed', 'total_time']
            titles = ['–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à', '–í—Ä–µ–º—è –º–µ–∂–¥—É –∫–ª–∞–≤–∏—à–∞–º–∏', 
                     '–°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏', '–û–±—â–µ–µ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞']
            
            for ax, feature_name, title in zip(axes, main_features, titles):
                if feature_name in feature_details:
                    details = feature_details[feature_name]
                    
                    current_val = details['value']
                    train_mean = details['train_mean']
                    train_std = details['train_std']
                    z_score = details['z_score']
                    
                    # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ" —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                    x = np.linspace(train_mean - 3*train_std, train_mean + 3*train_std, 100)
                    y = np.exp(-0.5 * ((x - train_mean) / train_std) ** 2)
                    
                    ax.clear()
                    ax.fill_between(x, y, alpha=0.3, color='lightblue', label='–í–∞—à –æ–±—ã—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω')
                    ax.axvline(train_mean, color='blue', linestyle='-', linewidth=2, label='–í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ')
                    ax.axvline(current_val, color='red', linestyle='--', linewidth=2, label='–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
                    
                    # –ó–æ–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π
                    ax.axvspan(train_mean - train_std, train_mean + train_std, alpha=0.2, color='green', label='–ù–æ—Ä–º–∞ (¬±1œÉ)')
                    ax.axvspan(train_mean - 2*train_std, train_mean + 2*train_std, alpha=0.1, color='yellow', label='–î–æ–ø—É—Å—Ç–∏–º–æ (¬±2œÉ)')
                    
                    ax.set_title(f'{title}\nZ-score: {z_score:.2f}')
                    ax.set_xlabel('–ó–Ω–∞—á–µ–Ω–∏–µ')
                    ax.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å')
                    ax.legend(fontsize=8)
                    ax.grid(True, alpha=0.3)
            
            self.fig_features.tight_layout()
            self.canvas_features.draw()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
    
    def plot_component_analysis(self):
        """–ì—Ä–∞—Ñ–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            knn_confidence = self.detailed_stats.get('knn_confidence', 0)
            distance_score = self.detailed_stats.get('distance_score', 0)
            feature_score = self.detailed_stats.get('feature_score', 0)
            weights = self.detailed_stats.get('weights', {'knn': 0.5, 'distance': 0.3, 'features': 0.2})
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            components = ['KNN\n–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä', '–ê–Ω–∞–ª–∏–∑\n–†–∞—Å—Å—Ç–æ—è–Ω–∏–π', '–ê–Ω–∞–ª–∏–∑\n–ü—Ä–∏–∑–Ω–∞–∫–æ–≤']
            scores = [knn_confidence, distance_score, feature_score]
            colors = ['skyblue', 'lightcoral', 'lightgreen']
            
            self.ax_comp1.clear()
            bars = self.ax_comp1.bar(components, scores, color=colors, alpha=0.7, edgecolor='black')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, score in zip(bars, scores):
                height = bar.get_height()
                self.ax_comp1.text(bar.get_x() + bar.get_width()/2., height + 0.02,
                                 f'{score:.1%}', ha='center', va='bottom', fontweight='bold')
            
            self.ax_comp1.set_ylabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
            self.ax_comp1.set_title('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
            self.ax_comp1.set_ylim(0, 1.1)
            self.ax_comp1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤–∫–ª–∞–¥
            weighted_scores = [
                knn_confidence * weights['knn'],
                distance_score * weights['distance'], 
                feature_score * weights['features']
            ]
            
            self.ax_comp2.clear()
            bars2 = self.ax_comp2.bar(components, weighted_scores, color=colors, alpha=0.7, edgecolor='black')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
            for bar, score, weight in zip(bars2, weighted_scores, weights.values()):
                height = bar.get_height()
                self.ax_comp2.text(bar.get_x() + bar.get_width()/2., height + 0.01,
                                 f'{score:.1%}\n(–≤–µ—Å: {weight:.1f})', ha='center', va='bottom', fontsize=9)
            
            # –õ–∏–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            self.ax_comp2.axhline(y=self.final_confidence, color='red', linestyle='--', 
                                linewidth=2, label=f'–ò—Ç–æ–≥–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {self.final_confidence:.1%}')
            
            self.ax_comp2.set_ylabel('–í–∑–≤–µ—à–µ–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å')
            self.ax_comp2.set_title('–í–∑–≤–µ—à–µ–Ω–Ω—ã–π –≤–∫–ª–∞–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤')
            self.ax_comp2.set_ylim(0, max(max(weighted_scores) * 1.2, self.final_confidence * 1.2))
            self.ax_comp2.legend()
            self.ax_comp2.grid(True, alpha=0.3)
            
            self.fig_components.tight_layout()
            self.canvas_components.draw()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

# ================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í –û–°–ù–û–í–ù–£–Æ –°–ò–°–¢–ï–ú–£
# ================================================================

# –î–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∞–π–ª auth/keystroke_auth.py:

