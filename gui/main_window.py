# gui/main_window.py - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è 1920x1080

import tkinter as tk
from tkinter import ttk, messagebox
from typing import Optional

from gui.login_window import LoginWindow
from gui.register_window import RegisterWindow
from gui.training_visualization_window import TrainingVisualizationWindow
from models.user import User
from auth.password_auth import PasswordAuthenticator
from auth.keystroke_auth import KeystrokeAuthenticator

import config
from config import APP_NAME, WINDOW_WIDTH, WINDOW_HEIGHT, FONT_FAMILY, FONT_SIZE

class MainWindow:
    """–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title(APP_NAME)
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        self.root.geometry(f"{WINDOW_WIDTH}x{WINDOW_HEIGHT}")
        self.root.resizable(True, True)
        self.root.minsize(600, 700)
        self.root.maxsize(1200, 1200)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.center_window()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.password_auth = PasswordAuthenticator()
        self.keystroke_auth = KeystrokeAuthenticator()
        
        # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        self.current_user: Optional[User] = None
        
        # –°—Ç–∏–ª–∏
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤
        title_size = max(16, FONT_SIZE + 6)
        header_size = max(12, FONT_SIZE + 2)
        button_size = max(10, FONT_SIZE)
        
        style.configure('Title.TLabel', font=(FONT_FAMILY, title_size, 'bold'))
        style.configure('Header.TLabel', font=(FONT_FAMILY, header_size, 'bold'))
        style.configure('Info.TLabel', font=(FONT_FAMILY, FONT_SIZE))
        style.configure('Success.TLabel', foreground='green', font=(FONT_FAMILY, FONT_SIZE))
        style.configure('Error.TLabel', foreground='red', font=(FONT_FAMILY, FONT_SIZE))
        style.configure('Big.TButton', font=(FONT_FAMILY, button_size), padding=(10, 8))
        style.configure('Compact.TButton', font=(FONT_FAMILY, FONT_SIZE-1), padding=(8, 4))
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        self.create_scrollable_container()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.create_header()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.main_frame = ttk.Frame(self.scrollable_frame, padding=15)
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω
        self.show_welcome_screen()
    
    def create_scrollable_container(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π"""
        # Canvas –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.canvas = tk.Canvas(self.root)
        self.scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=self.canvas.yview)
        self.scrollable_frame = ttk.Frame(self.canvas)
        
        self.scrollable_frame.bind(
            "<Configure>",
            lambda e: self.canvas.configure(scrollregion=self.canvas.bbox("all"))
        )
        
        self.canvas.create_window((0, 0), window=self.scrollable_frame, anchor="nw")
        self.canvas.configure(yscrollcommand=self.scrollbar.set)
        
        self.canvas.pack(side="left", fill="both", expand=True)
        self.scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–ª–µ—Å–∏–∫–∞ –º—ã—à–∏
        def _on_mousewheel(event):
            self.canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        self.canvas.bind("<MouseWheel>", _on_mousewheel)
    
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        header_frame = ttk.Frame(self.scrollable_frame, padding=15)
        header_frame.pack(fill=tk.X)
        
        title_label = ttk.Label(
            header_frame,
            text="–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è",
            style='Title.TLabel'
        )
        title_label.pack()
        
        subtitle_label = ttk.Label(
            header_frame,
            text="—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∏–Ω–∞–º–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à",
            style='Info.TLabel'
        )
        subtitle_label.pack()
    
    def show_welcome_screen(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
        self.clear_main_frame()
        
        welcome_frame = ttk.Frame(self.main_frame)
        welcome_frame.pack(fill=tk.BOTH, expand=True)
        
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        info_text = """–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–≤–∞ —Ñ–∞–∫—Ç–æ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:
1. –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
2. –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
‚Ä¢ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∞–≤–∏—à
‚Ä¢ –í—Ä–µ–º—è –º–µ–∂–¥—É –Ω–∞–∂–∞—Ç–∏—è–º–∏  
‚Ä¢ –û–±—â–∏–π —Ä–∏—Ç–º –ø–µ—á–∞—Ç–∏"""
        
        info_label = ttk.Label(
            welcome_frame,
            text=info_text,
            style='Info.TLabel',
            justify=tk.LEFT
        )
        info_label.pack(pady=15)
        
        # –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
        button_frame = ttk.Frame(welcome_frame)
        button_frame.pack(pady=15)
        
        login_btn = ttk.Button(
            button_frame,
            text="–í–æ–π—Ç–∏",
            style='Big.TButton',
            command=self.show_login
        )
        login_btn.pack(side=tk.LEFT, padx=10)
        
        register_btn = ttk.Button(
            button_frame,
            text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", 
            style='Big.TButton',
            command=self.show_register
        )
        register_btn.pack(side=tk.LEFT, padx=10)
    
    def show_login(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –≤—Ö–æ–¥–∞"""
        login_window = LoginWindow(
            self.root,
            self.password_auth,
            self.keystroke_auth,
            self.on_login_success
        )
    
    def show_register(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        register_window = RegisterWindow(
            self.root,
            self.password_auth,
            self.keystroke_auth,
            self.on_register_success
        )
    
    def on_login_success(self, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        self.current_user = user
        self.show_user_dashboard()
    
    def show_user_dashboard(self):
        """–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # üîç –û–¢–õ–ê–î–ö–ê
        print(f"\n=== –û–¢–õ–ê–î–ö–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.current_user.username} ===")
        try:
            self.password_auth.db.debug_user_samples(self.current_user.id)
        except AttributeError:
            print("–ú–µ—Ç–æ–¥ debug_user_samples –Ω–µ –Ω–∞–π–¥–µ–Ω")

        self.clear_main_frame()
    
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(self.main_frame)
        header_frame.pack(fill=tk.X, pady=(0, 15))
    
        welcome_label = ttk.Label(
            header_frame,
            text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.current_user.username}!",
            style='Header.TLabel'
        )
        welcome_label.pack()
    
        # –°—Ç–∞—Ç—É—Å –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
        status_frame = ttk.LabelFrame(self.main_frame, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", padding=10)
        status_frame.pack(fill=tk.X, pady=(0, 10))
    
        training_progress = self.keystroke_auth.get_training_progress(self.current_user)
    
        if self.current_user.is_trained:
            status_text = "‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            status_style = 'Success.TLabel'
        else:
            status_text = f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ ({training_progress['current_samples']}/{training_progress['required_samples']} –æ–±—Ä–∞–∑—Ü–æ–≤)"
            status_style = 'Error.TLabel'
    
        status_label = ttk.Label(status_frame, text=status_text, style=status_style)
        status_label.pack()
    
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        if not self.current_user.is_trained:
            progress_bar = ttk.Progressbar(
                status_frame,
                value=training_progress['progress_percent'],
                maximum=100,
                length=400
            )
            progress_bar.pack(pady=8)
    

    
        # –û–°–ù–û–í–ù–´–ï –ö–ù–û–ü–ö–ò –î–ï–ô–°–¢–í–ò–ô - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã
        actions_frame = ttk.LabelFrame(self.main_frame, text="–î–µ–π—Å—Ç–≤–∏—è", padding=10)
        actions_frame.pack(fill=tk.X, pady=(0, 10))
    
        # –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ 2x3
        if not self.current_user.is_trained:
            # –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è - —Å–∞–º–∞—è –≤–∞–∂–Ω–∞—è
            train_btn = ttk.Button(
                actions_frame,
                text="–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ",
                style='Big.TButton',
                command=self.start_training
            )
            train_btn.pack(fill=tk.X, pady=3)
        else:
            # –°–µ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            buttons_grid = ttk.Frame(actions_frame)
            buttons_grid.pack(fill=tk.X)
        
            # –†—è–¥ 1 - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            row1 = ttk.Frame(buttons_grid)
            row1.pack(fill=tk.X, pady=2)
        
            test_btn = ttk.Button(
                row1,
                text="–¢–µ—Å—Ç –≤—Ö–æ–¥–∞",
                style='Compact.TButton',
                command=self.test_authentication
            )
            test_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 2))
        
            stats_btn = ttk.Button(
                row1,
                text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                style='Compact.TButton',
                command=self.show_simple_stats
            )
            stats_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)


            # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
            results_btn = ttk.Button(
                row1,
                text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è",
                style='Compact.TButton',
                command=self.show_training_results
            )
            results_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(2, 0))

        
        
            # –†—è–¥ 2 - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            row2 = ttk.Frame(buttons_grid)
            row2.pack(fill=tk.X, pady=2)
        
            retrain_btn = ttk.Button(
                row2,
                text="–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å",
                style='Compact.TButton',
                command=self.retrain_model  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
            )
            retrain_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 2))


            # –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê - –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            controlled_test_btn = ttk.Button(
                row1,
                text="–¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                style='Compact.TButton',
                command=self.start_controlled_testing
            )
            controlled_test_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(2, 0))
        
            csv_btn = ttk.Button(
                row2,
                text="CSV —Ñ–∞–π–ª—ã",
                style='Compact.TButton',
                command=self.open_csv_folder
            )
            csv_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=2)
        
            logout_btn = ttk.Button(
                row2,
                text="–í—ã–π—Ç–∏",
                style='Compact.TButton',
                command=self.logout
            )
            logout_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(2, 0))
    
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        if not self.current_user.is_trained:
            general_frame = ttk.Frame(self.main_frame)
            general_frame.pack(fill=tk.X, pady=5)
        
            extra_row = ttk.Frame(general_frame)
            extra_row.pack(fill=tk.X)
        
            csv_btn = ttk.Button(
                extra_row,
                text="CSV —Ñ–∞–π–ª—ã",
                style='Compact.TButton',
                command=self.open_csv_folder
            )
            csv_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 3))
        
            logout_btn = ttk.Button(
                extra_row,
                text="–í—ã–π—Ç–∏",
                style='Compact.TButton',
                command=self.logout
            )
            logout_btn.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(3, 0))

        
    
    def start_training(self):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è"""
        from gui.training_window import TrainingWindow
        TrainingWindow(
            self.root,
            self.current_user,
            self.keystroke_auth,
            self.on_training_complete
        )
    
    def test_authentication(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        self.logout()
        self.show_login()
    
    def reset_and_retrain(self):
        """–°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if messagebox.askyesno(
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ?\n\n–í—Å–µ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!"
        ):
            success, message = self.keystroke_auth.reset_user_model(self.current_user)
            if success:
                self.current_user.is_trained = False
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —Å–±—Ä–æ—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
                self.show_user_dashboard()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", message)
    
    def on_training_complete(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è"""
        updated_user = self.password_auth.db.get_user_by_username(self.current_user.username)
        if updated_user:
            self.current_user = updated_user
    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        try:
            from ml.improved_model_trainer import ImprovedModelTrainer
            trainer = ImprovedModelTrainer.load_model(self.current_user.id)
            if trainer and trainer.training_stats:
                from gui.training_visualization_window import TrainingVisualizationWindow
                TrainingVisualizationWindow(self.root, self.current_user, trainer.training_stats)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    
        self.show_user_dashboard()
    
    def show_model_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–¥–µ–ª–∏ (—Ç–µ–ø–µ—Ä—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é)"""
        self.show_simple_stats()
    
    def show_enhanced_stats(self):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≥–æ –∂–µ –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Ç–æ–∂–µ —Å–∞–º–æ–µ –æ–∫–Ω–æ, —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.show_simple_stats()
    
    def open_csv_folder(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ —Å CSV —Ñ–∞–π–ª–∞–º–∏"""
        import os
        import subprocess
        import platform
        
        csv_dir = os.path.join(config.DATA_DIR, "csv_exports")
        os.makedirs(csv_dir, exist_ok=True)
        
        try:
            if platform.system() == 'Windows':
                os.startfile(csv_dir)
            elif platform.system() == 'Darwin':
                subprocess.Popen(['open', csv_dir])
            else:
                subprocess.Popen(['xdg-open', csv_dir])
            
            messagebox.showinfo("CSV —Ñ–∞–π–ª—ã", f"–ü–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞: {csv_dir}")
        except Exception as e:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.current_user = None
        self.show_welcome_screen()
    
    def clear_main_frame(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞"""
        for widget in self.main_frame.winfo_children():
            widget.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()
    
    def on_register_success(self, user: User):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        messagebox.showinfo(
            "–£—Å–ø–µ—Ö",
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã."
        )
        self.current_user = user
        self.show_user_dashboard()


    def show_simple_stats(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if not self.current_user or not self.current_user.is_trained:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
            return

        try:
            from gui.simplified_stats_window import SimplifiedStatsWindow
            SimplifiedStatsWindow(self.root, self.current_user, self.keystroke_auth)
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    def start_controlled_testing(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        if not self.current_user or not self.current_user.is_trained:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        training_samples = self.password_auth.db.get_user_training_samples(self.current_user.id)
        if len(training_samples) < 30:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                f"–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 30 –æ–±—É—á–∞—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤.\n"
                f"–£ –≤–∞—Å: {len(training_samples)} –æ–±—Ä–∞–∑—Ü–æ–≤.\n\n"
                f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º–∏.")
    
        if messagebox.askyesno("–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã?\n\n"
            "–ü—Ä–æ—Ü–µ—Å—Å –≤–∫–ª—é—á–∞–µ—Ç:\n"
            "1. –í–≤–æ–¥ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –æ–±—ã—á–Ω–æ–º —Ç–µ–º–ø–µ (10 —Ä–∞–∑)\n"
            "2. –í–≤–æ–¥ –æ–±—Ä–∞–∑—Ü–æ–≤ –≤ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–º —Ç–µ–º–ø–µ (10 —Ä–∞–∑)\n"
            "3. –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ FAR, FRR, EER\n"
            "4. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ROC-–∫—Ä–∏–≤–æ–π\n\n"
            "–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç."):
        
            try:
                from gui.controlled_testing_window import ControlledTestingWindow
                ControlledTestingWindow(self.root, self.current_user, self.keystroke_auth)
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")



    def retrain_model(self):
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.current_user:
            return
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤
        try:
            training_samples = self.password_auth.db.get_user_training_samples(self.current_user.id)
            from config import MIN_TRAINING_SAMPLES
        
            if len(training_samples) < MIN_TRAINING_SAMPLES:
                messagebox.showwarning(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö",
                    f"–î–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {MIN_TRAINING_SAMPLES} –æ–±—Ä–∞–∑—Ü–æ–≤.\n"
                    f"–£ –≤–∞—Å: {len(training_samples)} –æ–±—Ä–∞–∑—Ü–æ–≤.\n"
                    f"–°–æ–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—Ä–∞–∑—Ü—ã —á–µ—Ä–µ–∑ '–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ'."
                )
                return
        
            if messagebox.askyesno(
                "–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏",
                f"–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ {len(training_samples)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ–±—Ä–∞–∑—Ü–∞—Ö?\n\n"
                f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            ):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_window = tk.Toplevel(self.root)
                progress_window.title("–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")
                progress_window.geometry("300x100")
                progress_window.transient(self.root)
                progress_window.grab_set()
            
                ttk.Label(progress_window, text="–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...").pack(pady=20)
                progress_bar = ttk.Progressbar(progress_window, mode='indeterminate')
                progress_bar.pack(pady=10)
                progress_bar.start()
            
                def train_in_thread():
                    try:
                        # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
                        success, accuracy, message = self.keystroke_auth.train_user_model(self.current_user)
                    
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        self.root.after(0, lambda: self._training_completed(
                            success, accuracy, message, progress_window
                        ))
                    except Exception as e:
                        self.root.after(0, lambda: self._training_completed(
                            False, 0.0, f"–û—à–∏–±–∫–∞: {str(e)}", progress_window
                        ))
            
                import threading
                threading.Thread(target=train_in_thread, daemon=True).start()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏: {str(e)}")


    def _training_completed(self, success: bool, accuracy: float, message: str, progress_window):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è"""
        progress_window.destroy()
    
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            updated_user = self.password_auth.db.get_user_by_username(self.current_user.username)
            if updated_user:
                self.current_user = updated_user
        
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"{message}")
        
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            try:
                from ml.improved_model_trainer import ImprovedModelTrainer
                trainer = ImprovedModelTrainer.load_model(self.current_user.id)
                if trainer and trainer.training_stats:
                    from gui.training_visualization_window import TrainingVisualizationWindow
                    TrainingVisualizationWindow(self.root, self.current_user, trainer.training_stats)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self.show_user_dashboard()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", message)


    def show_training_results(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        if not self.current_user or not self.current_user.is_trained:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ú–æ–¥–µ–ª—å –Ω–µ –æ–±—É—á–µ–Ω–∞")
            return
    
        try:
            from ml.improved_model_trainer import ImprovedModelTrainer
            trainer = ImprovedModelTrainer.load_model(self.current_user.id)
        
            if trainer and trainer.training_stats:
                from gui.training_visualization_window import TrainingVisualizationWindow
                TrainingVisualizationWindow(self.root, self.current_user, trainer.training_stats)
            else:
                messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                    "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                    "–ü–µ—Ä–µ–æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}")