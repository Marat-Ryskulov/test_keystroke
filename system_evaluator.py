#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û—Ü–µ–Ω—â–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
–ê–≤—Ç–æ—Ä: –°—Ç—É–¥–µ–Ω—Ç
–¶–µ–ª—å: –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ FAR, FRR, EER, ROC –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import os
from datetime import datetime

class BiometricSystemEvaluator:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–û—Ü–µ–Ω—â–∏–∫ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã")
        self.root.geometry("800x600")
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
        self.legitimate_data = [85.1, 79.1, 73.0, 75.9, 82.4, 67.7, 83.8, 84.0, 81.6, 74.9]
        self.impostor_fast = [15.7, 15.7, 15.2, 16.0, 15.2, 15.7, 15.3, 15.4, 15.6, 14.8]
        self.impostor_slow = [64.6, 64.7, 64.2, 64.3, 64.2, 64.3, 64.0, 64.2, 64.2, 64.1]
        
        self.current_threshold = 75.0
        
        self.create_interface()
        
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üî¨ –û—Ü–µ–Ω—â–∏–∫ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã", 
                               font=("Arial", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=10)
        
        # –°–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        data_frame = ttk.LabelFrame(main_frame, text="üìä –î–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", padding="10")
        data_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        ttk.Label(data_frame, text="–õ–µ–≥–∏—Ç–∏–º–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (–≤–∞—à —Å—Ç–∏–ª—å):").grid(row=0, column=0, sticky=tk.W)
        self.legit_entry = tk.Text(data_frame, height=3, width=60)
        self.legit_entry.insert('1.0', ', '.join(map(str, self.legitimate_data)))
        self.legit_entry.grid(row=0, column=1, padx=5)
        
        ttk.Label(data_frame, text="–ò–º–∏—Ç–∞—Ç–æ—Ä—ã - –±—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å:").grid(row=1, column=0, sticky=tk.W)
        self.fast_entry = tk.Text(data_frame, height=3, width=60)
        self.fast_entry.insert('1.0', ', '.join(map(str, self.impostor_fast)))
        self.fast_entry.grid(row=1, column=1, padx=5)
        
        ttk.Label(data_frame, text="–ò–º–∏—Ç–∞—Ç–æ—Ä—ã - –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å:").grid(row=2, column=0, sticky=tk.W)
        self.slow_entry = tk.Text(data_frame, height=3, width=60)
        self.slow_entry.insert('1.0', ', '.join(map(str, self.impostor_slow)))
        self.slow_entry.grid(row=2, column=1, padx=5)
        
        # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_frame = ttk.LabelFrame(main_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", padding="10")
        settings_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=5)
        
        ttk.Label(settings_frame, text="–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ (%):").grid(row=0, column=0, sticky=tk.W)
        self.threshold_var = tk.DoubleVar(value=self.current_threshold)
        threshold_scale = ttk.Scale(settings_frame, from_=0, to=100, variable=self.threshold_var, 
                                   orient=tk.HORIZONTAL, length=200)
        threshold_scale.grid(row=0, column=1, padx=5)
        self.threshold_label = ttk.Label(settings_frame, text=f"{self.current_threshold:.1f}%")
        self.threshold_label.grid(row=0, column=2)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
        def update_threshold(*args):
            self.threshold_label.config(text=f"{self.threshold_var.get():.1f}%")
        self.threshold_var.trace('w', update_threshold)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=3, column=0, columnspan=3, pady=20)
        
        ttk.Button(button_frame, text="üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É", 
                  command=self.analyze_system, style="Accent.TButton").pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üìà –ü–æ–∫–∞–∑–∞—Ç—å ROC-–∫—Ä–∏–≤—É—é", 
                  command=self.show_roc_curve).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞", 
                  command=self.export_report).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                  command=self.load_data).pack(side=tk.LEFT, padx=5)
        
        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_frame = ttk.LabelFrame(main_frame, text="üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", padding="10")
        results_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=5)
        
        self.results_text = tk.Text(results_frame, height=15, width=80, wrap=tk.WORD)
        scrollbar = ttk.Scrollbar(results_frame, orient=tk.VERTICAL, command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=scrollbar.set)
        
        self.results_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(2, weight=1)
        main_frame.rowconfigure(4, weight=1)
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(0, weight=1)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.root.after(500, self.analyze_system)
    
    def parse_data(self, text_widget):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞"""
        try:
            text = text_widget.get('1.0', tk.END).strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º
            numbers = []
            for item in text.replace('\n', ' ').split(','):
                item = item.strip().replace('%', '')
                if item:
                    numbers.append(float(item))
            return numbers
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return []
    
    def analyze_system(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            legitimate = self.parse_data(self.legit_entry)
            fast_impostors = self.parse_data(self.fast_entry)
            slow_impostors = self.parse_data(self.slow_entry)
            current_threshold = self.threshold_var.get()
            
            if not legitimate or not (fast_impostors or slow_impostors):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
                return
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            legitimate = [x/100 if x > 1 else x for x in legitimate]
            fast_impostors = [x/100 if x > 1 else x for x in fast_impostors]
            slow_impostors = [x/100 if x > 1 else x for x in slow_impostors]
            current_threshold = current_threshold / 100
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤
            all_impostors = fast_impostors + slow_impostors
            
            # –ê–Ω–∞–ª–∏–∑ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä–æ–≥–æ–≤
            thresholds = np.arange(0.1, 1.0, 0.05)
            metrics_results = []
            
            for thresh in thresholds:
                # –õ–µ–≥–∏—Ç–∏–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
                tp = sum(1 for score in legitimate if score >= thresh)
                fn = len(legitimate) - tp
                
                # –ò–º–∏—Ç–∞—Ç–æ—Ä—ã
                fp = sum(1 for score in all_impostors if score >= thresh)
                tn = len(all_impostors) - fp
                
                # –ú–µ—Ç—Ä–∏–∫–∏
                far = (fp / len(all_impostors)) * 100 if all_impostors else 0
                frr = (fn / len(legitimate)) * 100 if legitimate else 0
                eer = (far + frr) / 2
                accuracy = ((tp + tn) / (len(legitimate) + len(all_impostors))) * 100
                
                metrics_results.append({
                    'threshold': thresh * 100,
                    'far': far,
                    'frr': frr,
                    'eer': eer,
                    'accuracy': accuracy,
                    'tp': tp, 'fn': fn, 'fp': fp, 'tn': tn
                })
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞
            current_result = min(metrics_results, 
                               key=lambda x: abs(x['threshold'] - current_threshold * 100))
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π EER)
            optimal_result = min(metrics_results, key=lambda x: x['eer'])
            
            # ROC –∞–Ω–∞–ª–∏–∑
            all_scores = legitimate + all_impostors
            all_labels = [1] * len(legitimate) + [0] * len(all_impostors)
            
            fpr, tpr, roc_thresholds = roc_curve(all_labels, all_scores)
            roc_auc = auc(fpr, tpr)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = self.generate_report(legitimate, fast_impostors, slow_impostors, 
                                        current_result, optimal_result, roc_auc, 
                                        current_threshold * 100)
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.results_text.delete('1.0', tk.END)
            self.results_text.insert('1.0', report)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            self.last_analysis = {
                'legitimate': legitimate,
                'impostors': all_impostors,
                'fast_impostors': fast_impostors,
                'slow_impostors': slow_impostors,
                'current_result': current_result,
                'optimal_result': optimal_result,
                'roc_auc': roc_auc,
                'metrics_results': metrics_results,
                'all_scores': all_scores,
                'all_labels': all_labels
            }
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            import traceback
            traceback.print_exc()
    
    def generate_report(self, legitimate, fast_impostors, slow_impostors, 
                       current_result, optimal_result, roc_auc, current_threshold):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        
        report = f"""
üî¨ –ê–ù–ê–õ–ò–ó –ë–ò–û–ú–ï–¢–†–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò
{'='*80}

üìä –í–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:
‚Ä¢ –õ–µ–≥–∏—Ç–∏–º–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (–≤–∞—à —Å—Ç–∏–ª—å): {len(legitimate)} –æ–±—Ä–∞–∑—Ü–æ–≤
  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(legitimate):.1%}
  –î–∏–∞–ø–∞–∑–æ–Ω: {min(legitimate):.1%} - {max(legitimate):.1%}
  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {np.std(legitimate):.1%}

‚Ä¢ –ò–º–∏—Ç–∞—Ç–æ—Ä—ã - –±—ã—Å—Ç—Ä–∞—è –ø–µ—á–∞—Ç—å: {len(fast_impostors)} –æ–±—Ä–∞–∑—Ü–æ–≤
  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(fast_impostors):.1%}
  –î–∏–∞–ø–∞–∑–æ–Ω: {min(fast_impostors):.1%} - {max(fast_impostors):.1%}

‚Ä¢ –ò–º–∏—Ç–∞—Ç–æ—Ä—ã - –º–µ–¥–ª–µ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å: {len(slow_impostors)} –æ–±—Ä–∞–∑—Ü–æ–≤
  –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {np.mean(slow_impostors):.1%}
  –î–∏–∞–ø–∞–∑–æ–Ω: {min(slow_impostors):.1%} - {max(slow_impostors):.1%}

üéØ –ú–ï–¢–†–ò–ö–ò –ü–†–ò –¢–ï–ö–£–©–ï–ú –ü–û–†–û–ì–ï ({current_threshold:.1f}%):

‚Ä¢ FAR (False Acceptance Rate): {current_result['far']:.2f}%
  –ü—Ä–∏–Ω—è—Ç–æ –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤: {current_result['fp']}/{current_result['fp'] + current_result['tn']}
  –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {self.interpret_far(current_result['far'])}

‚Ä¢ FRR (False Rejection Rate): {current_result['frr']:.2f}%
  –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö: {current_result['fn']}/{current_result['tp'] + current_result['fn']}
  –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {self.interpret_frr(current_result['frr'])}

‚Ä¢ EER (Equal Error Rate): {current_result['eer']:.2f}%
  –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: {self.interpret_eer(current_result['eer'])}

‚Ä¢ –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {current_result['accuracy']:.1f}%

üìà ROC –ê–ù–ê–õ–ò–ó:
‚Ä¢ AUC (Area Under Curve): {roc_auc:.3f}
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {self.interpret_auc(roc_auc)}
‚Ä¢ –†–∞–∑–¥–µ–ª–∏–º–æ—Å—Ç—å –∫–ª–∞—Å—Å–æ–≤: {abs(np.mean(legitimate) - np.mean(fast_impostors + slow_impostors)):.1%}

üéõÔ∏è –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–æ—Ä–æ–≥: {optimal_result['threshold']:.1f}%
‚Ä¢ FAR –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä–æ–≥–µ: {optimal_result['far']:.2f}%
‚Ä¢ FRR –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä–æ–≥–µ: {optimal_result['frr']:.2f}%
‚Ä¢ EER –ø—Ä–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –ø–æ—Ä–æ–≥–µ: {optimal_result['eer']:.2f}%

üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó CONFUSION MATRIX:
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                 ‚îÇ   –°–∏—Å—Ç–µ–º–∞    ‚îÇ   –°–∏—Å—Ç–µ–º–∞    ‚îÇ
‚îÇ                 ‚îÇ  –ü–†–ò–ù–ò–ú–ê–ï–¢   ‚îÇ  –û–¢–ö–õ–û–ù–Ø–ï–¢   ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –õ–µ–≥–∏—Ç–∏–º–Ω—ã–π      ‚îÇ TP: {current_result['tp']:8d} ‚îÇ FN: {current_result['fn']:8d} ‚îÇ
‚îÇ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å    ‚îÇ              ‚îÇ              ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ –ò–º–∏—Ç–∞—Ç–æ—Ä        ‚îÇ FP: {current_result['fp']:8d} ‚îÇ TN: {current_result['tn']:8d} ‚îÇ
‚îÇ                 ‚îÇ              ‚îÇ              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

üí° –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –î–õ–Ø –î–ò–ü–õ–û–ú–ù–û–ô –†–ê–ë–û–¢–´:
{self.generate_conclusion(current_result, optimal_result, roc_auc)}

üìÖ –î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
"""
        return report
    
    def interpret_far(self, far):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è FAR"""
        if far == 0:
            return "–û–¢–õ–ò–ß–ù–û - –ø–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤"
        elif far < 5:
            return "–û–¢–õ–ò–ß–ù–û - –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤"
        elif far < 15:
            return "–•–û–†–û–®–û - –ø—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        elif far < 30:
            return "–°–†–ï–î–ù–ï - —É–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
        else:
            return "–ü–õ–û–•–û - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∏–º–∏—Ç–∞—Ç–æ—Ä–æ–≤"
    
    def interpret_frr(self, frr):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è FRR"""
        if frr < 10:
            return "–û–¢–õ–ò–ß–ù–û - –æ—á–µ–Ω—å —É–¥–æ–±–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        elif frr < 25:
            return "–•–û–†–û–®–û - –ø—Ä–∏–µ–º–ª–µ–º–æ–µ —É–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        elif frr < 40:
            return "–°–†–ï–î–ù–ï - –≤–æ–∑–º–æ–∂–Ω—ã —á–∞—Å—Ç—ã–µ –æ—Ç–∫–∞–∑—ã"
        else:
            return "–ü–õ–û–•–û - –Ω–µ—É–¥–æ–±–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    def interpret_eer(self, eer):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è EER"""
        if eer < 5:
            return "–û–¢–õ–ò–ß–ù–û - —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"
        elif eer < 15:
            return "–•–û–†–û–®–û - —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—É—á–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"
        elif eer < 25:
            return "–°–†–ï–î–ù–ï - –ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π"
        else:
            return "–ü–õ–û–•–û - —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"
    
    def interpret_auc(self, auc_val):
        """–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è AUC"""
        if auc_val >= 0.95:
            return "–û–¢–õ–ò–ß–ù–û (–ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)"
        elif auc_val >= 0.85:
            return "–•–û–†–û–®–û (—Ö–æ—Ä–æ—à–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)"
        elif auc_val >= 0.75:
            return "–°–†–ï–î–ù–ï (—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)"
        else:
            return "–ü–õ–û–•–û (—Å–ª–∞–±–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)"
    
    def generate_conclusion(self, current_result, optimal_result, roc_auc):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –¥–∏–ø–ª–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
        conclusions = []
        
        if roc_auc >= 0.9:
            conclusions.append("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞–∑–ª–∏—á–∞—Ç—å –∫–ª–∞—Å—Å—ã")
        
        if current_result['far'] <= 5:
            conclusions.append("‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫ –∏–º–∏—Ç–∞—Ü–∏–∏")
        
        if current_result['eer'] <= 15:
            conclusions.append("‚Ä¢ EER —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –±–∏–æ–º–µ—Ç—Ä–∏–∏")
        
        if optimal_result['eer'] < current_result['eer']:
            diff = current_result['eer'] - optimal_result['eer']
            conclusions.append(f"‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ EER –Ω–∞ {diff:.1f}% –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–æ—Ä–æ–≥–∞")
        
        conclusions.append("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è")
        
        return "\n".join(conclusions)
    
    def show_roc_curve(self):
        """–ü–æ–∫–∞–∑ ROC-–∫—Ä–∏–≤–æ–π"""
        if not hasattr(self, 'last_analysis'):
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã!")
            return
        
        try:
            data = self.last_analysis
            
            # ROC –∫—Ä–∏–≤–∞—è
            fpr, tpr, thresholds = roc_curve(data['all_labels'], data['all_scores'])
            roc_auc = data['roc_auc']
            
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
            fig.suptitle('–ê–Ω–∞–ª–∏–∑ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', fontsize=16, fontweight='bold')
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: ROC –∫—Ä–∏–≤–∞—è
            ax1.plot(fpr, tpr, color='darkorange', lw=3, label=f'ROC –∫—Ä–∏–≤–∞—è (AUC = {roc_auc:.3f})')
            ax1.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='–°–ª—É—á–∞–π–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä')
            ax1.set_xlim([0.0, 1.0])
            ax1.set_ylim([0.0, 1.05])
            ax1.set_xlabel('False Positive Rate (FAR)', fontsize=12)
            ax1.set_ylabel('True Positive Rate (1 - FRR)', fontsize=12)
            ax1.set_title('ROC –ö—Ä–∏–≤–∞—è', fontsize=14, fontweight='bold')
            ax1.legend(loc="lower right")
            ax1.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
            ax2.hist(data['legitimate'], bins=15, alpha=0.7, color='green', 
                    label=f'–õ–µ–≥–∏—Ç–∏–º–Ω—ã–µ ({len(data["legitimate"])})', density=True, edgecolor='darkgreen')
            ax2.hist(data['impostors'], bins=15, alpha=0.7, color='red',
                    label=f'–ò–º–∏—Ç–∞—Ç–æ—Ä—ã ({len(data["impostors"])})', density=True, edgecolor='darkred')
            ax2.axvline(self.threshold_var.get()/100, color='black', linestyle='--', linewidth=2, 
                       label=f'–ü–æ—Ä–æ–≥ {self.threshold_var.get():.1f}%')
            ax2.set_xlabel('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã', fontsize=12)
            ax2.set_ylabel('–ü–ª–æ—Ç–Ω–æ—Å—Ç—å', fontsize=12)
            ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫', fontsize=14, fontweight='bold')
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: FAR vs FRR vs –ü–æ—Ä–æ–≥
            thresholds_list = [r['threshold'] for r in data['metrics_results']]
            far_list = [r['far'] for r in data['metrics_results']]
            frr_list = [r['frr'] for r in data['metrics_results']]
            
            ax3.plot(thresholds_list, far_list, 'r-o', label='FAR', linewidth=2, markersize=4)
            ax3.plot(thresholds_list, frr_list, 'b-s', label='FRR', linewidth=2, markersize=4)
            ax3.axvline(self.threshold_var.get(), color='gray', linestyle='--', alpha=0.7, 
                       label='–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥')
            ax3.axvline(data['optimal_result']['threshold'], color='green', linestyle='--', 
                       alpha=0.7, label='–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥')
            ax3.set_xlabel('–ü–æ—Ä–æ–≥ (%)', fontsize=12)
            ax3.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ (%)', fontsize=12)
            ax3.set_title('FAR –∏ FRR vs –ü–æ—Ä–æ–≥', fontsize=14, fontweight='bold')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: EER vs –ü–æ—Ä–æ–≥
            eer_list = [r['eer'] for r in data['metrics_results']]
            ax4.plot(thresholds_list, eer_list, 'g-^', label='EER', linewidth=3, markersize=6)
            ax4.axvline(self.threshold_var.get(), color='gray', linestyle='--', alpha=0.7, 
                       label='–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥')
            ax4.axvline(data['optimal_result']['threshold'], color='green', linestyle='--', 
                       alpha=0.7, label='–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥')
            ax4.set_xlabel('–ü–æ—Ä–æ–≥ (%)', fontsize=12)
            ax4.set_ylabel('EER (%)', fontsize=12)
            ax4.set_title('Equal Error Rate vs –ü–æ—Ä–æ–≥', fontsize=14, fontweight='bold')
            ax4.legend()
            ax4.grid(True, alpha=0.3)
            
            plt.tight_layout()
            plt.show()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
    
    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
                title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç"
            )
            
            if filename:
                report = self.results_text.get('1.0', tk.END)
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(report)
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            filename = filedialog.askopenfilename(
                filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")],
                title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
            )
            
            if filename:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                if 'legitimate' in data:
                    self.legit_entry.delete('1.0', tk.END)
                    self.legit_entry.insert('1.0', ', '.join(map(str, data['legitimate'])))
                
                if 'fast_impostors' in data:
                    self.fast_entry.delete('1.0', tk.END)
                    self.fast_entry.insert('1.0', ', '.join(map(str, data['fast_impostors'])))
                
                if 'slow_impostors' in data:
                    self.slow_entry.delete('1.0', tk.END)
                    self.slow_entry.insert('1.0', ', '.join(map(str, data['slow_impostors'])))
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω—â–∏–∫–∞ –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    app = BiometricSystemEvaluator()
    app.run()

if __name__ == "__main__":
    main()